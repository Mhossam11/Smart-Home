
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000d90  00000e24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  00000e26  2**0
                  ALLOC
  3 .stab         00001674  00000000  00000000  00000e28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004c0  00000000  00000000  0000249c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  00002960  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b5d  00000000  00000000  00002a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000406  00000000  00000000  000035dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000834  00000000  00000000  000039e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  00004218  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003aa  00000000  00000000  00004480  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008b9  00000000  00000000  0000482a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 c2 04 	jmp	0x984	; 0x984 <__vector_10>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	01 04       	cpc	r0, r1
  56:	15 04       	cpc	r1, r5
  58:	29 04       	cpc	r2, r9
  5a:	3d 04       	cpc	r3, r13
  5c:	51 04       	cpc	r5, r1
  5e:	65 04       	cpc	r6, r5
  60:	f0 03       	fmuls	r23, r16
  62:	f0 03       	fmuls	r23, r16
  64:	f0 03       	fmuls	r23, r16
  66:	f0 03       	fmuls	r23, r16
  68:	f0 03       	fmuls	r23, r16
  6a:	f0 03       	fmuls	r23, r16
  6c:	f0 03       	fmuls	r23, r16
  6e:	f0 03       	fmuls	r23, r16
  70:	f0 03       	fmuls	r23, r16
  72:	f0 03       	fmuls	r23, r16
  74:	79 04       	cpc	r7, r9
  76:	83 04       	cpc	r8, r3
  78:	8d 04       	cpc	r8, r13
  7a:	97 04       	cpc	r9, r7
  7c:	a1 04       	cpc	r10, r1
  7e:	ab 04       	cpc	r10, r11
  80:	f0 03       	fmuls	r23, r16
  82:	f0 03       	fmuls	r23, r16
  84:	f0 03       	fmuls	r23, r16
  86:	f0 03       	fmuls	r23, r16
  88:	f0 03       	fmuls	r23, r16
  8a:	f0 03       	fmuls	r23, r16
  8c:	f0 03       	fmuls	r23, r16
  8e:	f0 03       	fmuls	r23, r16
  90:	f0 03       	fmuls	r23, r16
  92:	f0 03       	fmuls	r23, r16
  94:	7e 04       	cpc	r7, r14
  96:	88 04       	cpc	r8, r8
  98:	92 04       	cpc	r9, r2
  9a:	9c 04       	cpc	r9, r12
  9c:	a6 04       	cpc	r10, r6
  9e:	b2 04       	cpc	r11, r2
  a0:	f0 03       	fmuls	r23, r16
  a2:	f0 03       	fmuls	r23, r16
  a4:	f0 03       	fmuls	r23, r16
  a6:	f0 03       	fmuls	r23, r16
  a8:	f0 03       	fmuls	r23, r16
  aa:	f0 03       	fmuls	r23, r16
  ac:	f0 03       	fmuls	r23, r16
  ae:	f0 03       	fmuls	r23, r16
  b0:	f0 03       	fmuls	r23, r16
  b2:	b9 04       	cpc	r11, r9

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf e5       	ldi	r28, 0x5F	; 95
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	10 e0       	ldi	r17, 0x00	; 0
  c2:	a0 e6       	ldi	r26, 0x60	; 96
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	e0 e9       	ldi	r30, 0x90	; 144
  c8:	fd e0       	ldi	r31, 0x0D	; 13
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 36       	cpi	r26, 0x62	; 98
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	10 e0       	ldi	r17, 0x00	; 0
  d8:	a2 e6       	ldi	r26, 0x62	; 98
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a6 36       	cpi	r26, 0x66	; 102
  e2:	b1 07       	cpc	r27, r17
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 ca 03 	call	0x794	; 0x794 <main>
  ea:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <ADC_vInit>:
#include "MACROS.h"
#include <avr/io.h>

void ADC_vInit(void)	//by default bysht8l 3la pin 0 port A ela law 8ayrtha mn ADMUX
{
	SET_BIT(ADMUX,REFS0);		//Vref howa el volt el internal  bas lazm a7ot capacitor ma3 pin AREF
  f2:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(ADMUX,REFS1);
  f4:	3f 9a       	sbi	0x07, 7	; 7
	
	SET_BIT(ADCSRA,ADEN);		//ENABLE ADC
  f6:	37 9a       	sbi	0x06, 7	; 6
	
	SET_BIT(ADCSRA,ADPS2);		//DIVISION FACTOR IS 64
  f8:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(ADCSRA,ADPS1);
  fa:	31 9a       	sbi	0x06, 1	; 6
}
  fc:	08 95       	ret

000000fe <ADC_u16Read>:

unsigned short ADC_u16Read(void)
{
	unsigned short return_value;
	SET_BIT(ADCSRA,ADSC);
  fe:	36 9a       	sbi	0x06, 6	; 6
	while(READ_BIT(ADCSRA,ADSC)==1);		//loop yfdl mkano tol ma el ADSC=1 hya msh htrg3 0 8er lma el conversion ttem 5als
 100:	36 99       	sbic	0x06, 6	; 6
 102:	fe cf       	rjmp	.-4      	; 0x100 <ADC_u16Read+0x2>
	SET_BIT(ADCSRA,ADIF);					//clear el interrupt flag 
 104:	34 9a       	sbi	0x06, 4	; 6
	
	return_value=(ADCL);
 106:	84 b1       	in	r24, 0x04	; 4
 108:	90 e0       	ldi	r25, 0x00	; 0
	return_value|=(ADCH<<8);
 10a:	45 b1       	in	r20, 0x05	; 5
 10c:	34 2f       	mov	r19, r20
 10e:	20 e0       	ldi	r18, 0x00	; 0
 110:	82 2b       	or	r24, r18
 112:	93 2b       	or	r25, r19
	
	return return_value;
 114:	08 95       	ret

00000116 <DIO_set_PINDir>:
#include "DIO_driver.h"
#include "MACROS.h"

void DIO_set_PINDir(unsigned char portname,unsigned char pinnumber,unsigned char Direction) //EX: ('A',0,1)
{
	switch(portname)
 116:	84 34       	cpi	r24, 0x44	; 68
 118:	09 f4       	brne	.+2      	; 0x11c <DIO_set_PINDir+0x6>
 11a:	71 c0       	rjmp	.+226    	; 0x1fe <DIO_set_PINDir+0xe8>
 11c:	85 34       	cpi	r24, 0x45	; 69
 11e:	48 f4       	brcc	.+18     	; 0x132 <DIO_set_PINDir+0x1c>
 120:	82 34       	cpi	r24, 0x42	; 66
 122:	99 f1       	breq	.+102    	; 0x18a <DIO_set_PINDir+0x74>
 124:	83 34       	cpi	r24, 0x43	; 67
 126:	08 f0       	brcs	.+2      	; 0x12a <DIO_set_PINDir+0x14>
 128:	4d c0       	rjmp	.+154    	; 0x1c4 <DIO_set_PINDir+0xae>
 12a:	81 34       	cpi	r24, 0x41	; 65
 12c:	09 f0       	breq	.+2      	; 0x130 <DIO_set_PINDir+0x1a>
 12e:	83 c0       	rjmp	.+262    	; 0x236 <DIO_set_PINDir+0x120>
 130:	0f c0       	rjmp	.+30     	; 0x150 <DIO_set_PINDir+0x3a>
 132:	82 36       	cpi	r24, 0x62	; 98
 134:	51 f1       	breq	.+84     	; 0x18a <DIO_set_PINDir+0x74>
 136:	83 36       	cpi	r24, 0x63	; 99
 138:	20 f4       	brcc	.+8      	; 0x142 <DIO_set_PINDir+0x2c>
 13a:	81 36       	cpi	r24, 0x61	; 97
 13c:	09 f0       	breq	.+2      	; 0x140 <DIO_set_PINDir+0x2a>
 13e:	7b c0       	rjmp	.+246    	; 0x236 <DIO_set_PINDir+0x120>
 140:	07 c0       	rjmp	.+14     	; 0x150 <DIO_set_PINDir+0x3a>
 142:	83 36       	cpi	r24, 0x63	; 99
 144:	09 f4       	brne	.+2      	; 0x148 <DIO_set_PINDir+0x32>
 146:	3e c0       	rjmp	.+124    	; 0x1c4 <DIO_set_PINDir+0xae>
 148:	84 36       	cpi	r24, 0x64	; 100
 14a:	09 f0       	breq	.+2      	; 0x14e <DIO_set_PINDir+0x38>
 14c:	74 c0       	rjmp	.+232    	; 0x236 <DIO_set_PINDir+0x120>
 14e:	57 c0       	rjmp	.+174    	; 0x1fe <DIO_set_PINDir+0xe8>
	{
		case 'A':
		case 'a':
		if(Direction==1)
 150:	41 30       	cpi	r20, 0x01	; 1
 152:	69 f4       	brne	.+26     	; 0x16e <DIO_set_PINDir+0x58>
		{
			SET_BIT(DDRA,pinnumber);
 154:	2a b3       	in	r18, 0x1a	; 26
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	ac 01       	movw	r20, r24
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_set_PINDir+0x4c>
 15e:	44 0f       	add	r20, r20
 160:	55 1f       	adc	r21, r21
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_set_PINDir+0x48>
 166:	ba 01       	movw	r22, r20
 168:	62 2b       	or	r22, r18
 16a:	6a bb       	out	0x1a, r22	; 26
 16c:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRA,pinnumber);
 16e:	2a b3       	in	r18, 0x1a	; 26
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	ac 01       	movw	r20, r24
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_set_PINDir+0x66>
 178:	44 0f       	add	r20, r20
 17a:	55 1f       	adc	r21, r21
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_set_PINDir+0x62>
 180:	ba 01       	movw	r22, r20
 182:	60 95       	com	r22
 184:	62 23       	and	r22, r18
 186:	6a bb       	out	0x1a, r22	; 26
 188:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b':
		if(Direction==1)
 18a:	41 30       	cpi	r20, 0x01	; 1
 18c:	69 f4       	brne	.+26     	; 0x1a8 <DIO_set_PINDir+0x92>
		{
			SET_BIT(DDRB,pinnumber);
 18e:	27 b3       	in	r18, 0x17	; 23
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	ac 01       	movw	r20, r24
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_set_PINDir+0x86>
 198:	44 0f       	add	r20, r20
 19a:	55 1f       	adc	r21, r21
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_set_PINDir+0x82>
 1a0:	ba 01       	movw	r22, r20
 1a2:	62 2b       	or	r22, r18
 1a4:	67 bb       	out	0x17, r22	; 23
 1a6:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);
 1a8:	27 b3       	in	r18, 0x17	; 23
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	ac 01       	movw	r20, r24
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_set_PINDir+0xa0>
 1b2:	44 0f       	add	r20, r20
 1b4:	55 1f       	adc	r21, r21
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_set_PINDir+0x9c>
 1ba:	ba 01       	movw	r22, r20
 1bc:	60 95       	com	r22
 1be:	62 23       	and	r22, r18
 1c0:	67 bb       	out	0x17, r22	; 23
 1c2:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':
		if(Direction==1)
 1c4:	41 30       	cpi	r20, 0x01	; 1
 1c6:	69 f4       	brne	.+26     	; 0x1e2 <DIO_set_PINDir+0xcc>
		{
			SET_BIT(DDRC,pinnumber);
 1c8:	24 b3       	in	r18, 0x14	; 20
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	ac 01       	movw	r20, r24
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_set_PINDir+0xc0>
 1d2:	44 0f       	add	r20, r20
 1d4:	55 1f       	adc	r21, r21
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_set_PINDir+0xbc>
 1da:	ba 01       	movw	r22, r20
 1dc:	62 2b       	or	r22, r18
 1de:	64 bb       	out	0x14, r22	; 20
 1e0:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);
 1e2:	24 b3       	in	r18, 0x14	; 20
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	ac 01       	movw	r20, r24
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_set_PINDir+0xda>
 1ec:	44 0f       	add	r20, r20
 1ee:	55 1f       	adc	r21, r21
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_set_PINDir+0xd6>
 1f4:	ba 01       	movw	r22, r20
 1f6:	60 95       	com	r22
 1f8:	62 23       	and	r22, r18
 1fa:	64 bb       	out	0x14, r22	; 20
 1fc:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':
		if(Direction==1)
 1fe:	41 30       	cpi	r20, 0x01	; 1
 200:	69 f4       	brne	.+26     	; 0x21c <DIO_set_PINDir+0x106>
		{
			SET_BIT(DDRD,pinnumber);
 202:	21 b3       	in	r18, 0x11	; 17
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	ac 01       	movw	r20, r24
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_set_PINDir+0xfa>
 20c:	44 0f       	add	r20, r20
 20e:	55 1f       	adc	r21, r21
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_set_PINDir+0xf6>
 214:	ba 01       	movw	r22, r20
 216:	62 2b       	or	r22, r18
 218:	61 bb       	out	0x11, r22	; 17
 21a:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);
 21c:	21 b3       	in	r18, 0x11	; 17
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	ac 01       	movw	r20, r24
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_set_PINDir+0x114>
 226:	44 0f       	add	r20, r20
 228:	55 1f       	adc	r21, r21
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_set_PINDir+0x110>
 22e:	ba 01       	movw	r22, r20
 230:	60 95       	com	r22
 232:	62 23       	and	r22, r18
 234:	61 bb       	out	0x11, r22	; 17
 236:	08 95       	ret

00000238 <DIO_Write>:
	}
}

void DIO_Write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)//EX: ('A',0,1)
{
	switch(portname)
 238:	84 34       	cpi	r24, 0x44	; 68
 23a:	09 f4       	brne	.+2      	; 0x23e <DIO_Write+0x6>
 23c:	71 c0       	rjmp	.+226    	; 0x320 <DIO_Write+0xe8>
 23e:	85 34       	cpi	r24, 0x45	; 69
 240:	48 f4       	brcc	.+18     	; 0x254 <DIO_Write+0x1c>
 242:	82 34       	cpi	r24, 0x42	; 66
 244:	99 f1       	breq	.+102    	; 0x2ac <DIO_Write+0x74>
 246:	83 34       	cpi	r24, 0x43	; 67
 248:	08 f0       	brcs	.+2      	; 0x24c <DIO_Write+0x14>
 24a:	4d c0       	rjmp	.+154    	; 0x2e6 <DIO_Write+0xae>
 24c:	81 34       	cpi	r24, 0x41	; 65
 24e:	09 f0       	breq	.+2      	; 0x252 <DIO_Write+0x1a>
 250:	83 c0       	rjmp	.+262    	; 0x358 <DIO_Write+0x120>
 252:	0f c0       	rjmp	.+30     	; 0x272 <DIO_Write+0x3a>
 254:	82 36       	cpi	r24, 0x62	; 98
 256:	51 f1       	breq	.+84     	; 0x2ac <DIO_Write+0x74>
 258:	83 36       	cpi	r24, 0x63	; 99
 25a:	20 f4       	brcc	.+8      	; 0x264 <DIO_Write+0x2c>
 25c:	81 36       	cpi	r24, 0x61	; 97
 25e:	09 f0       	breq	.+2      	; 0x262 <DIO_Write+0x2a>
 260:	7b c0       	rjmp	.+246    	; 0x358 <DIO_Write+0x120>
 262:	07 c0       	rjmp	.+14     	; 0x272 <DIO_Write+0x3a>
 264:	83 36       	cpi	r24, 0x63	; 99
 266:	09 f4       	brne	.+2      	; 0x26a <DIO_Write+0x32>
 268:	3e c0       	rjmp	.+124    	; 0x2e6 <DIO_Write+0xae>
 26a:	84 36       	cpi	r24, 0x64	; 100
 26c:	09 f0       	breq	.+2      	; 0x270 <DIO_Write+0x38>
 26e:	74 c0       	rjmp	.+232    	; 0x358 <DIO_Write+0x120>
 270:	57 c0       	rjmp	.+174    	; 0x320 <DIO_Write+0xe8>
	{
		case 'A':
		case 'a':
		if(outputvalue==1)
 272:	41 30       	cpi	r20, 0x01	; 1
 274:	69 f4       	brne	.+26     	; 0x290 <DIO_Write+0x58>
		{
			SET_BIT(PORTA,pinnumber);
 276:	2b b3       	in	r18, 0x1b	; 27
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	ac 01       	movw	r20, r24
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_Write+0x4c>
 280:	44 0f       	add	r20, r20
 282:	55 1f       	adc	r21, r21
 284:	6a 95       	dec	r22
 286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_Write+0x48>
 288:	ba 01       	movw	r22, r20
 28a:	62 2b       	or	r22, r18
 28c:	6b bb       	out	0x1b, r22	; 27
 28e:	08 95       	ret
		}
		else 
		{
			CLR_BIT(PORTA,pinnumber);
 290:	2b b3       	in	r18, 0x1b	; 27
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	ac 01       	movw	r20, r24
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_Write+0x66>
 29a:	44 0f       	add	r20, r20
 29c:	55 1f       	adc	r21, r21
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_Write+0x62>
 2a2:	ba 01       	movw	r22, r20
 2a4:	60 95       	com	r22
 2a6:	62 23       	and	r22, r18
 2a8:	6b bb       	out	0x1b, r22	; 27
 2aa:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b':
		if(outputvalue==1)
 2ac:	41 30       	cpi	r20, 0x01	; 1
 2ae:	69 f4       	brne	.+26     	; 0x2ca <DIO_Write+0x92>
		{
			SET_BIT(PORTB,pinnumber);
 2b0:	28 b3       	in	r18, 0x18	; 24
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	ac 01       	movw	r20, r24
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_Write+0x86>
 2ba:	44 0f       	add	r20, r20
 2bc:	55 1f       	adc	r21, r21
 2be:	6a 95       	dec	r22
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_Write+0x82>
 2c2:	ba 01       	movw	r22, r20
 2c4:	62 2b       	or	r22, r18
 2c6:	68 bb       	out	0x18, r22	; 24
 2c8:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 2ca:	28 b3       	in	r18, 0x18	; 24
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	ac 01       	movw	r20, r24
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_Write+0xa0>
 2d4:	44 0f       	add	r20, r20
 2d6:	55 1f       	adc	r21, r21
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_Write+0x9c>
 2dc:	ba 01       	movw	r22, r20
 2de:	60 95       	com	r22
 2e0:	62 23       	and	r22, r18
 2e2:	68 bb       	out	0x18, r22	; 24
 2e4:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':
		if(outputvalue==1)
 2e6:	41 30       	cpi	r20, 0x01	; 1
 2e8:	69 f4       	brne	.+26     	; 0x304 <DIO_Write+0xcc>
		{
			SET_BIT(PORTC,pinnumber);
 2ea:	25 b3       	in	r18, 0x15	; 21
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	ac 01       	movw	r20, r24
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_Write+0xc0>
 2f4:	44 0f       	add	r20, r20
 2f6:	55 1f       	adc	r21, r21
 2f8:	6a 95       	dec	r22
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_Write+0xbc>
 2fc:	ba 01       	movw	r22, r20
 2fe:	62 2b       	or	r22, r18
 300:	65 bb       	out	0x15, r22	; 21
 302:	08 95       	ret
		}
		else 
		{
			CLR_BIT(PORTC,pinnumber);
 304:	25 b3       	in	r18, 0x15	; 21
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	ac 01       	movw	r20, r24
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_Write+0xda>
 30e:	44 0f       	add	r20, r20
 310:	55 1f       	adc	r21, r21
 312:	6a 95       	dec	r22
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_Write+0xd6>
 316:	ba 01       	movw	r22, r20
 318:	60 95       	com	r22
 31a:	62 23       	and	r22, r18
 31c:	65 bb       	out	0x15, r22	; 21
 31e:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':
		if(outputvalue==1)
 320:	41 30       	cpi	r20, 0x01	; 1
 322:	69 f4       	brne	.+26     	; 0x33e <DIO_Write+0x106>
		{
			SET_BIT(PORTD,pinnumber);
 324:	22 b3       	in	r18, 0x12	; 18
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	ac 01       	movw	r20, r24
 32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_Write+0xfa>
 32e:	44 0f       	add	r20, r20
 330:	55 1f       	adc	r21, r21
 332:	6a 95       	dec	r22
 334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_Write+0xf6>
 336:	ba 01       	movw	r22, r20
 338:	62 2b       	or	r22, r18
 33a:	62 bb       	out	0x12, r22	; 18
 33c:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
 33e:	22 b3       	in	r18, 0x12	; 18
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	ac 01       	movw	r20, r24
 346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_Write+0x114>
 348:	44 0f       	add	r20, r20
 34a:	55 1f       	adc	r21, r21
 34c:	6a 95       	dec	r22
 34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_Write+0x110>
 350:	ba 01       	movw	r22, r20
 352:	60 95       	com	r22
 354:	62 23       	and	r22, r18
 356:	62 bb       	out	0x12, r22	; 18
 358:	08 95       	ret

0000035a <DIO_u8read>:
}

unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)//EX: ('A',0)
{
	unsigned char return_value=0;
	switch(portname)
 35a:	84 34       	cpi	r24, 0x44	; 68
 35c:	09 f4       	brne	.+2      	; 0x360 <DIO_u8read+0x6>
 35e:	4e c0       	rjmp	.+156    	; 0x3fc <DIO_u8read+0xa2>
 360:	85 34       	cpi	r24, 0x45	; 69
 362:	40 f4       	brcc	.+16     	; 0x374 <DIO_u8read+0x1a>
 364:	82 34       	cpi	r24, 0x42	; 66
 366:	31 f1       	breq	.+76     	; 0x3b4 <DIO_u8read+0x5a>
 368:	83 34       	cpi	r24, 0x43	; 67
 36a:	b0 f5       	brcc	.+108    	; 0x3d8 <DIO_u8read+0x7e>
 36c:	81 34       	cpi	r24, 0x41	; 65
 36e:	09 f0       	breq	.+2      	; 0x372 <DIO_u8read+0x18>
 370:	57 c0       	rjmp	.+174    	; 0x420 <DIO_u8read+0xc6>
 372:	0e c0       	rjmp	.+28     	; 0x390 <DIO_u8read+0x36>
 374:	82 36       	cpi	r24, 0x62	; 98
 376:	f1 f0       	breq	.+60     	; 0x3b4 <DIO_u8read+0x5a>
 378:	83 36       	cpi	r24, 0x63	; 99
 37a:	20 f4       	brcc	.+8      	; 0x384 <DIO_u8read+0x2a>
 37c:	81 36       	cpi	r24, 0x61	; 97
 37e:	09 f0       	breq	.+2      	; 0x382 <DIO_u8read+0x28>
 380:	4f c0       	rjmp	.+158    	; 0x420 <DIO_u8read+0xc6>
 382:	06 c0       	rjmp	.+12     	; 0x390 <DIO_u8read+0x36>
 384:	83 36       	cpi	r24, 0x63	; 99
 386:	41 f1       	breq	.+80     	; 0x3d8 <DIO_u8read+0x7e>
 388:	84 36       	cpi	r24, 0x64	; 100
 38a:	09 f0       	breq	.+2      	; 0x38e <DIO_u8read+0x34>
 38c:	49 c0       	rjmp	.+146    	; 0x420 <DIO_u8read+0xc6>
 38e:	36 c0       	rjmp	.+108    	; 0x3fc <DIO_u8read+0xa2>
	{
		case 'A':
		case 'a':
		return_value=READ_BIT(PINA,pinnumber);
 390:	29 b3       	in	r18, 0x19	; 25
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	06 2e       	mov	r0, r22
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_u8read+0x44>
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	0a 94       	dec	r0
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_u8read+0x40>
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	82 23       	and	r24, r18
 3a6:	93 23       	and	r25, r19
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_u8read+0x54>
 3aa:	95 95       	asr	r25
 3ac:	87 95       	ror	r24
 3ae:	6a 95       	dec	r22
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_u8read+0x50>
		break;
 3b2:	08 95       	ret
		
		case 'B':
		case 'b':
		return_value=READ_BIT(PINB,pinnumber);
 3b4:	26 b3       	in	r18, 0x16	; 22
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	06 2e       	mov	r0, r22
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_u8read+0x68>
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	0a 94       	dec	r0
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_u8read+0x64>
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	82 23       	and	r24, r18
 3ca:	93 23       	and	r25, r19
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_u8read+0x78>
 3ce:	95 95       	asr	r25
 3d0:	87 95       	ror	r24
 3d2:	6a 95       	dec	r22
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_u8read+0x74>
		break;
 3d6:	08 95       	ret
		
		case 'C':
		case 'c':
		return_value=READ_BIT(PINC,pinnumber);
 3d8:	23 b3       	in	r18, 0x13	; 19
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	06 2e       	mov	r0, r22
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_u8read+0x8c>
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	0a 94       	dec	r0
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_u8read+0x88>
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	82 23       	and	r24, r18
 3ee:	93 23       	and	r25, r19
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <DIO_u8read+0x9c>
 3f2:	95 95       	asr	r25
 3f4:	87 95       	ror	r24
 3f6:	6a 95       	dec	r22
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <DIO_u8read+0x98>
		break;
 3fa:	08 95       	ret
		
		case 'D':
		case 'd':
		return_value=READ_BIT(PIND,pinnumber);
 3fc:	20 b3       	in	r18, 0x10	; 16
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	06 2e       	mov	r0, r22
 404:	02 c0       	rjmp	.+4      	; 0x40a <DIO_u8read+0xb0>
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	0a 94       	dec	r0
 40c:	e2 f7       	brpl	.-8      	; 0x406 <DIO_u8read+0xac>
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	82 23       	and	r24, r18
 412:	93 23       	and	r25, r19
 414:	02 c0       	rjmp	.+4      	; 0x41a <DIO_u8read+0xc0>
 416:	95 95       	asr	r25
 418:	87 95       	ror	r24
 41a:	6a 95       	dec	r22
 41c:	e2 f7       	brpl	.-8      	; 0x416 <DIO_u8read+0xbc>
		break;
 41e:	08 95       	ret
	}
}

unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)//EX: ('A',0)
{
	unsigned char return_value=0;
 420:	80 e0       	ldi	r24, 0x00	; 0
		
		default:
		break;
	}
	return return_value;
}
 422:	08 95       	ret

00000424 <DIO_Toggle>:

void DIO_Toggle(unsigned char portname,unsigned char pinnumber)//EX: ('A',0)
{
	switch(portname)
 424:	84 34       	cpi	r24, 0x44	; 68
 426:	09 f4       	brne	.+2      	; 0x42a <DIO_Toggle+0x6>
 428:	3d c0       	rjmp	.+122    	; 0x4a4 <DIO_Toggle+0x80>
 42a:	85 34       	cpi	r24, 0x45	; 69
 42c:	40 f4       	brcc	.+16     	; 0x43e <DIO_Toggle+0x1a>
 42e:	82 34       	cpi	r24, 0x42	; 66
 430:	f9 f0       	breq	.+62     	; 0x470 <DIO_Toggle+0x4c>
 432:	83 34       	cpi	r24, 0x43	; 67
 434:	50 f5       	brcc	.+84     	; 0x48a <DIO_Toggle+0x66>
 436:	81 34       	cpi	r24, 0x41	; 65
 438:	09 f0       	breq	.+2      	; 0x43c <DIO_Toggle+0x18>
 43a:	40 c0       	rjmp	.+128    	; 0x4bc <DIO_Toggle+0x98>
 43c:	0c c0       	rjmp	.+24     	; 0x456 <DIO_Toggle+0x32>
 43e:	82 36       	cpi	r24, 0x62	; 98
 440:	b9 f0       	breq	.+46     	; 0x470 <DIO_Toggle+0x4c>
 442:	83 36       	cpi	r24, 0x63	; 99
 444:	18 f4       	brcc	.+6      	; 0x44c <DIO_Toggle+0x28>
 446:	81 36       	cpi	r24, 0x61	; 97
 448:	c9 f5       	brne	.+114    	; 0x4bc <DIO_Toggle+0x98>
 44a:	05 c0       	rjmp	.+10     	; 0x456 <DIO_Toggle+0x32>
 44c:	83 36       	cpi	r24, 0x63	; 99
 44e:	e9 f0       	breq	.+58     	; 0x48a <DIO_Toggle+0x66>
 450:	84 36       	cpi	r24, 0x64	; 100
 452:	a1 f5       	brne	.+104    	; 0x4bc <DIO_Toggle+0x98>
 454:	27 c0       	rjmp	.+78     	; 0x4a4 <DIO_Toggle+0x80>
	{
		case 'A':
		case 'a':
		TOG_BIT(PORTA,pinnumber);
 456:	2b b3       	in	r18, 0x1b	; 27
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	ac 01       	movw	r20, r24
 45e:	02 c0       	rjmp	.+4      	; 0x464 <DIO_Toggle+0x40>
 460:	44 0f       	add	r20, r20
 462:	55 1f       	adc	r21, r21
 464:	6a 95       	dec	r22
 466:	e2 f7       	brpl	.-8      	; 0x460 <DIO_Toggle+0x3c>
 468:	ba 01       	movw	r22, r20
 46a:	62 27       	eor	r22, r18
 46c:	6b bb       	out	0x1b, r22	; 27
		break;
 46e:	08 95       	ret
		
		case 'B':
		case 'b':
		TOG_BIT(PORTB,pinnumber);
 470:	28 b3       	in	r18, 0x18	; 24
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	ac 01       	movw	r20, r24
 478:	02 c0       	rjmp	.+4      	; 0x47e <DIO_Toggle+0x5a>
 47a:	44 0f       	add	r20, r20
 47c:	55 1f       	adc	r21, r21
 47e:	6a 95       	dec	r22
 480:	e2 f7       	brpl	.-8      	; 0x47a <DIO_Toggle+0x56>
 482:	ba 01       	movw	r22, r20
 484:	62 27       	eor	r22, r18
 486:	68 bb       	out	0x18, r22	; 24
		break;
 488:	08 95       	ret
		
		case 'C':
		case 'c':
		TOG_BIT(PORTC,pinnumber);
 48a:	25 b3       	in	r18, 0x15	; 21
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	ac 01       	movw	r20, r24
 492:	02 c0       	rjmp	.+4      	; 0x498 <DIO_Toggle+0x74>
 494:	44 0f       	add	r20, r20
 496:	55 1f       	adc	r21, r21
 498:	6a 95       	dec	r22
 49a:	e2 f7       	brpl	.-8      	; 0x494 <DIO_Toggle+0x70>
 49c:	ba 01       	movw	r22, r20
 49e:	62 27       	eor	r22, r18
 4a0:	65 bb       	out	0x15, r22	; 21
		break;
 4a2:	08 95       	ret
		
		case 'D':
		case 'd':
		TOG_BIT(PORTD,pinnumber);
 4a4:	22 b3       	in	r18, 0x12	; 18
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	ac 01       	movw	r20, r24
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <DIO_Toggle+0x8e>
 4ae:	44 0f       	add	r20, r20
 4b0:	55 1f       	adc	r21, r21
 4b2:	6a 95       	dec	r22
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <DIO_Toggle+0x8a>
 4b6:	ba 01       	movw	r22, r20
 4b8:	62 27       	eor	r22, r18
 4ba:	62 bb       	out	0x12, r22	; 18
 4bc:	08 95       	ret

000004be <DIO_SET_Port_Direction>:
	}
}

void DIO_SET_Port_Direction(unsigned char portname,unsigned char direction)//EX: ('A',0xFF)
{
	switch(portname)
 4be:	84 34       	cpi	r24, 0x44	; 68
 4c0:	d9 f0       	breq	.+54     	; 0x4f8 <DIO_SET_Port_Direction+0x3a>
 4c2:	85 34       	cpi	r24, 0x45	; 69
 4c4:	38 f4       	brcc	.+14     	; 0x4d4 <DIO_SET_Port_Direction+0x16>
 4c6:	82 34       	cpi	r24, 0x42	; 66
 4c8:	99 f0       	breq	.+38     	; 0x4f0 <DIO_SET_Port_Direction+0x32>
 4ca:	83 34       	cpi	r24, 0x43	; 67
 4cc:	98 f4       	brcc	.+38     	; 0x4f4 <DIO_SET_Port_Direction+0x36>
 4ce:	81 34       	cpi	r24, 0x41	; 65
 4d0:	a1 f4       	brne	.+40     	; 0x4fa <DIO_SET_Port_Direction+0x3c>
 4d2:	0c c0       	rjmp	.+24     	; 0x4ec <DIO_SET_Port_Direction+0x2e>
 4d4:	82 36       	cpi	r24, 0x62	; 98
 4d6:	61 f0       	breq	.+24     	; 0x4f0 <DIO_SET_Port_Direction+0x32>
 4d8:	83 36       	cpi	r24, 0x63	; 99
 4da:	18 f4       	brcc	.+6      	; 0x4e2 <DIO_SET_Port_Direction+0x24>
 4dc:	81 36       	cpi	r24, 0x61	; 97
 4de:	69 f4       	brne	.+26     	; 0x4fa <DIO_SET_Port_Direction+0x3c>
 4e0:	05 c0       	rjmp	.+10     	; 0x4ec <DIO_SET_Port_Direction+0x2e>
 4e2:	83 36       	cpi	r24, 0x63	; 99
 4e4:	39 f0       	breq	.+14     	; 0x4f4 <DIO_SET_Port_Direction+0x36>
 4e6:	84 36       	cpi	r24, 0x64	; 100
 4e8:	41 f4       	brne	.+16     	; 0x4fa <DIO_SET_Port_Direction+0x3c>
 4ea:	06 c0       	rjmp	.+12     	; 0x4f8 <DIO_SET_Port_Direction+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=direction;
 4ec:	6a bb       	out	0x1a, r22	; 26
		break;
 4ee:	08 95       	ret
		
		case 'B':
		case 'b':
		DDRB=direction;
 4f0:	67 bb       	out	0x17, r22	; 23
		break;
 4f2:	08 95       	ret
		
		case 'C':
		case 'c':
		DDRC=direction;
 4f4:	64 bb       	out	0x14, r22	; 20
		break;
 4f6:	08 95       	ret
		
		case 'D':
		case 'd':
		DDRD=direction;
 4f8:	61 bb       	out	0x11, r22	; 17
 4fa:	08 95       	ret

000004fc <DIO_WRITE_PORT>:
	}
}

void DIO_WRITE_PORT(unsigned char portname, unsigned char outputvalue)//EX: ('A',0xFF)
{
	switch(portname)
 4fc:	84 34       	cpi	r24, 0x44	; 68
 4fe:	d9 f0       	breq	.+54     	; 0x536 <DIO_WRITE_PORT+0x3a>
 500:	85 34       	cpi	r24, 0x45	; 69
 502:	38 f4       	brcc	.+14     	; 0x512 <DIO_WRITE_PORT+0x16>
 504:	82 34       	cpi	r24, 0x42	; 66
 506:	99 f0       	breq	.+38     	; 0x52e <DIO_WRITE_PORT+0x32>
 508:	83 34       	cpi	r24, 0x43	; 67
 50a:	98 f4       	brcc	.+38     	; 0x532 <DIO_WRITE_PORT+0x36>
 50c:	81 34       	cpi	r24, 0x41	; 65
 50e:	a1 f4       	brne	.+40     	; 0x538 <DIO_WRITE_PORT+0x3c>
 510:	0c c0       	rjmp	.+24     	; 0x52a <DIO_WRITE_PORT+0x2e>
 512:	82 36       	cpi	r24, 0x62	; 98
 514:	61 f0       	breq	.+24     	; 0x52e <DIO_WRITE_PORT+0x32>
 516:	83 36       	cpi	r24, 0x63	; 99
 518:	18 f4       	brcc	.+6      	; 0x520 <DIO_WRITE_PORT+0x24>
 51a:	81 36       	cpi	r24, 0x61	; 97
 51c:	69 f4       	brne	.+26     	; 0x538 <DIO_WRITE_PORT+0x3c>
 51e:	05 c0       	rjmp	.+10     	; 0x52a <DIO_WRITE_PORT+0x2e>
 520:	83 36       	cpi	r24, 0x63	; 99
 522:	39 f0       	breq	.+14     	; 0x532 <DIO_WRITE_PORT+0x36>
 524:	84 36       	cpi	r24, 0x64	; 100
 526:	41 f4       	brne	.+16     	; 0x538 <DIO_WRITE_PORT+0x3c>
 528:	06 c0       	rjmp	.+12     	; 0x536 <DIO_WRITE_PORT+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=outputvalue;
 52a:	6b bb       	out	0x1b, r22	; 27
		break;
 52c:	08 95       	ret
		
		case 'B':
		case 'b':
		PORTB=outputvalue;
 52e:	68 bb       	out	0x18, r22	; 24
		break;
 530:	08 95       	ret
		
		case 'C':
		case 'c':
		PORTC=outputvalue;
 532:	65 bb       	out	0x15, r22	; 21
		break;
 534:	08 95       	ret
		
		case 'D':
		case 'd':
		PORTD=outputvalue;
 536:	62 bb       	out	0x12, r22	; 18
 538:	08 95       	ret

0000053a <DIO_Read_PORT>:
}

unsigned char DIO_Read_PORT(unsigned char portname)
{
	unsigned char return_value=0;
	switch(portname)
 53a:	84 34       	cpi	r24, 0x44	; 68
 53c:	d9 f0       	breq	.+54     	; 0x574 <DIO_Read_PORT+0x3a>
 53e:	85 34       	cpi	r24, 0x45	; 69
 540:	38 f4       	brcc	.+14     	; 0x550 <DIO_Read_PORT+0x16>
 542:	82 34       	cpi	r24, 0x42	; 66
 544:	99 f0       	breq	.+38     	; 0x56c <DIO_Read_PORT+0x32>
 546:	83 34       	cpi	r24, 0x43	; 67
 548:	98 f4       	brcc	.+38     	; 0x570 <DIO_Read_PORT+0x36>
 54a:	81 34       	cpi	r24, 0x41	; 65
 54c:	a9 f4       	brne	.+42     	; 0x578 <DIO_Read_PORT+0x3e>
 54e:	0c c0       	rjmp	.+24     	; 0x568 <DIO_Read_PORT+0x2e>
 550:	82 36       	cpi	r24, 0x62	; 98
 552:	61 f0       	breq	.+24     	; 0x56c <DIO_Read_PORT+0x32>
 554:	83 36       	cpi	r24, 0x63	; 99
 556:	18 f4       	brcc	.+6      	; 0x55e <DIO_Read_PORT+0x24>
 558:	81 36       	cpi	r24, 0x61	; 97
 55a:	71 f4       	brne	.+28     	; 0x578 <DIO_Read_PORT+0x3e>
 55c:	05 c0       	rjmp	.+10     	; 0x568 <DIO_Read_PORT+0x2e>
 55e:	83 36       	cpi	r24, 0x63	; 99
 560:	39 f0       	breq	.+14     	; 0x570 <DIO_Read_PORT+0x36>
 562:	84 36       	cpi	r24, 0x64	; 100
 564:	49 f4       	brne	.+18     	; 0x578 <DIO_Read_PORT+0x3e>
 566:	06 c0       	rjmp	.+12     	; 0x574 <DIO_Read_PORT+0x3a>
	{
		case 'A':
		case 'a':
		return_value=PINA;
 568:	89 b3       	in	r24, 0x19	; 25
		break;
 56a:	08 95       	ret
		
		case 'B':
		case 'b':
		return_value=PINB;
 56c:	86 b3       	in	r24, 0x16	; 22
		break;
 56e:	08 95       	ret
		
		case 'C':
		case 'c':
		return_value=PINC;
 570:	83 b3       	in	r24, 0x13	; 19
		break;
 572:	08 95       	ret
		
		case 'D':
		case 'd':
		return_value=PIND;
 574:	80 b3       	in	r24, 0x10	; 16
		break;
 576:	08 95       	ret
	}
}

unsigned char DIO_Read_PORT(unsigned char portname)
{
	unsigned char return_value=0;
 578:	80 e0       	ldi	r24, 0x00	; 0
		default:
		break;
		
	}
	return return_value;
}
 57a:	08 95       	ret

0000057c <DIO_vConnectPullup>:

void DIO_vConnectPullup(unsigned char portname,unsigned char pinnumber,unsigned char Connect_PullUp)
{
	switch(portname)
 57c:	84 34       	cpi	r24, 0x44	; 68
 57e:	09 f4       	brne	.+2      	; 0x582 <DIO_vConnectPullup+0x6>
 580:	71 c0       	rjmp	.+226    	; 0x664 <DIO_vConnectPullup+0xe8>
 582:	85 34       	cpi	r24, 0x45	; 69
 584:	48 f4       	brcc	.+18     	; 0x598 <DIO_vConnectPullup+0x1c>
 586:	82 34       	cpi	r24, 0x42	; 66
 588:	99 f1       	breq	.+102    	; 0x5f0 <DIO_vConnectPullup+0x74>
 58a:	83 34       	cpi	r24, 0x43	; 67
 58c:	08 f0       	brcs	.+2      	; 0x590 <DIO_vConnectPullup+0x14>
 58e:	4d c0       	rjmp	.+154    	; 0x62a <DIO_vConnectPullup+0xae>
 590:	81 34       	cpi	r24, 0x41	; 65
 592:	09 f0       	breq	.+2      	; 0x596 <DIO_vConnectPullup+0x1a>
 594:	83 c0       	rjmp	.+262    	; 0x69c <DIO_vConnectPullup+0x120>
 596:	0f c0       	rjmp	.+30     	; 0x5b6 <DIO_vConnectPullup+0x3a>
 598:	82 36       	cpi	r24, 0x62	; 98
 59a:	51 f1       	breq	.+84     	; 0x5f0 <DIO_vConnectPullup+0x74>
 59c:	83 36       	cpi	r24, 0x63	; 99
 59e:	20 f4       	brcc	.+8      	; 0x5a8 <DIO_vConnectPullup+0x2c>
 5a0:	81 36       	cpi	r24, 0x61	; 97
 5a2:	09 f0       	breq	.+2      	; 0x5a6 <DIO_vConnectPullup+0x2a>
 5a4:	7b c0       	rjmp	.+246    	; 0x69c <DIO_vConnectPullup+0x120>
 5a6:	07 c0       	rjmp	.+14     	; 0x5b6 <DIO_vConnectPullup+0x3a>
 5a8:	83 36       	cpi	r24, 0x63	; 99
 5aa:	09 f4       	brne	.+2      	; 0x5ae <DIO_vConnectPullup+0x32>
 5ac:	3e c0       	rjmp	.+124    	; 0x62a <DIO_vConnectPullup+0xae>
 5ae:	84 36       	cpi	r24, 0x64	; 100
 5b0:	09 f0       	breq	.+2      	; 0x5b4 <DIO_vConnectPullup+0x38>
 5b2:	74 c0       	rjmp	.+232    	; 0x69c <DIO_vConnectPullup+0x120>
 5b4:	57 c0       	rjmp	.+174    	; 0x664 <DIO_vConnectPullup+0xe8>
	{
		case 'A':
		case 'a':
		if (Connect_PullUp==1)
 5b6:	41 30       	cpi	r20, 0x01	; 1
 5b8:	69 f4       	brne	.+26     	; 0x5d4 <DIO_vConnectPullup+0x58>
		{
			SET_BIT(PORTA,pinnumber);
 5ba:	2b b3       	in	r18, 0x1b	; 27
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	ac 01       	movw	r20, r24
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <DIO_vConnectPullup+0x4c>
 5c4:	44 0f       	add	r20, r20
 5c6:	55 1f       	adc	r21, r21
 5c8:	6a 95       	dec	r22
 5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <DIO_vConnectPullup+0x48>
 5cc:	ba 01       	movw	r22, r20
 5ce:	62 2b       	or	r22, r18
 5d0:	6b bb       	out	0x1b, r22	; 27
 5d2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 5d4:	2b b3       	in	r18, 0x1b	; 27
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	ac 01       	movw	r20, r24
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <DIO_vConnectPullup+0x66>
 5de:	44 0f       	add	r20, r20
 5e0:	55 1f       	adc	r21, r21
 5e2:	6a 95       	dec	r22
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <DIO_vConnectPullup+0x62>
 5e6:	ba 01       	movw	r22, r20
 5e8:	60 95       	com	r22
 5ea:	62 23       	and	r22, r18
 5ec:	6b bb       	out	0x1b, r22	; 27
 5ee:	08 95       	ret
		break;
		
		
		case 'B':
		case 'b':
		if(Connect_PullUp==1)
 5f0:	41 30       	cpi	r20, 0x01	; 1
 5f2:	69 f4       	brne	.+26     	; 0x60e <DIO_vConnectPullup+0x92>
		{
			SET_BIT(PORTB,pinnumber);
 5f4:	28 b3       	in	r18, 0x18	; 24
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	ac 01       	movw	r20, r24
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <DIO_vConnectPullup+0x86>
 5fe:	44 0f       	add	r20, r20
 600:	55 1f       	adc	r21, r21
 602:	6a 95       	dec	r22
 604:	e2 f7       	brpl	.-8      	; 0x5fe <DIO_vConnectPullup+0x82>
 606:	ba 01       	movw	r22, r20
 608:	62 2b       	or	r22, r18
 60a:	68 bb       	out	0x18, r22	; 24
 60c:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 60e:	28 b3       	in	r18, 0x18	; 24
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	ac 01       	movw	r20, r24
 616:	02 c0       	rjmp	.+4      	; 0x61c <DIO_vConnectPullup+0xa0>
 618:	44 0f       	add	r20, r20
 61a:	55 1f       	adc	r21, r21
 61c:	6a 95       	dec	r22
 61e:	e2 f7       	brpl	.-8      	; 0x618 <DIO_vConnectPullup+0x9c>
 620:	ba 01       	movw	r22, r20
 622:	60 95       	com	r22
 624:	62 23       	and	r22, r18
 626:	68 bb       	out	0x18, r22	; 24
 628:	08 95       	ret
		break;
		
		
		case 'C':
		case 'c':
		if(Connect_PullUp==1)
 62a:	41 30       	cpi	r20, 0x01	; 1
 62c:	69 f4       	brne	.+26     	; 0x648 <DIO_vConnectPullup+0xcc>
		{
			SET_BIT(PORTC,pinnumber);
 62e:	25 b3       	in	r18, 0x15	; 21
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	ac 01       	movw	r20, r24
 636:	02 c0       	rjmp	.+4      	; 0x63c <DIO_vConnectPullup+0xc0>
 638:	44 0f       	add	r20, r20
 63a:	55 1f       	adc	r21, r21
 63c:	6a 95       	dec	r22
 63e:	e2 f7       	brpl	.-8      	; 0x638 <DIO_vConnectPullup+0xbc>
 640:	ba 01       	movw	r22, r20
 642:	62 2b       	or	r22, r18
 644:	65 bb       	out	0x15, r22	; 21
 646:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
 648:	25 b3       	in	r18, 0x15	; 21
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	ac 01       	movw	r20, r24
 650:	02 c0       	rjmp	.+4      	; 0x656 <DIO_vConnectPullup+0xda>
 652:	44 0f       	add	r20, r20
 654:	55 1f       	adc	r21, r21
 656:	6a 95       	dec	r22
 658:	e2 f7       	brpl	.-8      	; 0x652 <DIO_vConnectPullup+0xd6>
 65a:	ba 01       	movw	r22, r20
 65c:	60 95       	com	r22
 65e:	62 23       	and	r22, r18
 660:	65 bb       	out	0x15, r22	; 21
 662:	08 95       	ret
		break;
		
		
		case 'D':
		case 'd':
		if(Connect_PullUp==1)
 664:	41 30       	cpi	r20, 0x01	; 1
 666:	69 f4       	brne	.+26     	; 0x682 <DIO_vConnectPullup+0x106>
		{
			SET_BIT(PORTD,pinnumber);
 668:	22 b3       	in	r18, 0x12	; 18
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	ac 01       	movw	r20, r24
 670:	02 c0       	rjmp	.+4      	; 0x676 <DIO_vConnectPullup+0xfa>
 672:	44 0f       	add	r20, r20
 674:	55 1f       	adc	r21, r21
 676:	6a 95       	dec	r22
 678:	e2 f7       	brpl	.-8      	; 0x672 <DIO_vConnectPullup+0xf6>
 67a:	ba 01       	movw	r22, r20
 67c:	62 2b       	or	r22, r18
 67e:	62 bb       	out	0x12, r22	; 18
 680:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
 682:	22 b3       	in	r18, 0x12	; 18
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	ac 01       	movw	r20, r24
 68a:	02 c0       	rjmp	.+4      	; 0x690 <DIO_vConnectPullup+0x114>
 68c:	44 0f       	add	r20, r20
 68e:	55 1f       	adc	r21, r21
 690:	6a 95       	dec	r22
 692:	e2 f7       	brpl	.-8      	; 0x68c <DIO_vConnectPullup+0x110>
 694:	ba 01       	movw	r22, r20
 696:	60 95       	com	r22
 698:	62 23       	and	r22, r18
 69a:	62 bb       	out	0x12, r22	; 18
 69c:	08 95       	ret

0000069e <DIO_Write_Low_Nibble>:
}


void DIO_Write_Low_Nibble(unsigned char portname,unsigned char value)////EX: ('B',0x08)
{
	value &=0x0F;	//b7me nfse mn 8ba2 el user 3shan law da5l value akbr mn 9
 69e:	6f 70       	andi	r22, 0x0F	; 15
	
	switch(portname)
 6a0:	84 34       	cpi	r24, 0x44	; 68
 6a2:	51 f1       	breq	.+84     	; 0x6f8 <DIO_Write_Low_Nibble+0x5a>
 6a4:	85 34       	cpi	r24, 0x45	; 69
 6a6:	38 f4       	brcc	.+14     	; 0x6b6 <DIO_Write_Low_Nibble+0x18>
 6a8:	82 34       	cpi	r24, 0x42	; 66
 6aa:	c1 f0       	breq	.+48     	; 0x6dc <DIO_Write_Low_Nibble+0x3e>
 6ac:	83 34       	cpi	r24, 0x43	; 67
 6ae:	e8 f4       	brcc	.+58     	; 0x6ea <DIO_Write_Low_Nibble+0x4c>
 6b0:	81 34       	cpi	r24, 0x41	; 65
 6b2:	41 f5       	brne	.+80     	; 0x704 <DIO_Write_Low_Nibble+0x66>
 6b4:	0c c0       	rjmp	.+24     	; 0x6ce <DIO_Write_Low_Nibble+0x30>
 6b6:	82 36       	cpi	r24, 0x62	; 98
 6b8:	89 f0       	breq	.+34     	; 0x6dc <DIO_Write_Low_Nibble+0x3e>
 6ba:	83 36       	cpi	r24, 0x63	; 99
 6bc:	18 f4       	brcc	.+6      	; 0x6c4 <DIO_Write_Low_Nibble+0x26>
 6be:	81 36       	cpi	r24, 0x61	; 97
 6c0:	09 f5       	brne	.+66     	; 0x704 <DIO_Write_Low_Nibble+0x66>
 6c2:	05 c0       	rjmp	.+10     	; 0x6ce <DIO_Write_Low_Nibble+0x30>
 6c4:	83 36       	cpi	r24, 0x63	; 99
 6c6:	89 f0       	breq	.+34     	; 0x6ea <DIO_Write_Low_Nibble+0x4c>
 6c8:	84 36       	cpi	r24, 0x64	; 100
 6ca:	e1 f4       	brne	.+56     	; 0x704 <DIO_Write_Low_Nibble+0x66>
 6cc:	15 c0       	rjmp	.+42     	; 0x6f8 <DIO_Write_Low_Nibble+0x5a>
	{
		case 'A':
		case 'a':
		PORTA &=0xF0;	//basfr el low nibble fel port da
 6ce:	8b b3       	in	r24, 0x1b	; 27
 6d0:	80 7f       	andi	r24, 0xF0	; 240
 6d2:	8b bb       	out	0x1b, r24	; 27
		PORTA |=value;	//btl3 el value bt3te
 6d4:	8b b3       	in	r24, 0x1b	; 27
 6d6:	68 2b       	or	r22, r24
 6d8:	6b bb       	out	0x1b, r22	; 27
		break;
 6da:	08 95       	ret
		
		case 'B':
		case 'b':
		PORTB &=0xF0;	//bsfr low nibble fel port da
 6dc:	88 b3       	in	r24, 0x18	; 24
 6de:	80 7f       	andi	r24, 0xF0	; 240
 6e0:	88 bb       	out	0x18, r24	; 24
		PORTB |=value;
 6e2:	88 b3       	in	r24, 0x18	; 24
 6e4:	68 2b       	or	r22, r24
 6e6:	68 bb       	out	0x18, r22	; 24
		break;
 6e8:	08 95       	ret
		
		case 'C':
		case 'c':
		PORTC &=0xF0;
 6ea:	85 b3       	in	r24, 0x15	; 21
 6ec:	80 7f       	andi	r24, 0xF0	; 240
 6ee:	85 bb       	out	0x15, r24	; 21
		PORTC |=value;
 6f0:	85 b3       	in	r24, 0x15	; 21
 6f2:	68 2b       	or	r22, r24
 6f4:	65 bb       	out	0x15, r22	; 21
		break;
 6f6:	08 95       	ret
		
		case 'D':
		case 'd':
		PORTD &=0xF0;
 6f8:	82 b3       	in	r24, 0x12	; 18
 6fa:	80 7f       	andi	r24, 0xF0	; 240
 6fc:	82 bb       	out	0x12, r24	; 18
		PORTD |=value;
 6fe:	82 b3       	in	r24, 0x12	; 18
 700:	68 2b       	or	r22, r24
 702:	62 bb       	out	0x12, r22	; 18
 704:	08 95       	ret

00000706 <DIO_Write_High_Nibble>:
	}
}

void DIO_Write_High_Nibble(unsigned char portname,unsigned char value)  //EX: ('a',0x02)
{
	value<<=4;		//ba7me nafse mn 8ba2 el user
 706:	62 95       	swap	r22
 708:	60 7f       	andi	r22, 0xF0	; 240
	
	switch(portname)
 70a:	84 34       	cpi	r24, 0x44	; 68
 70c:	51 f1       	breq	.+84     	; 0x762 <DIO_Write_High_Nibble+0x5c>
 70e:	85 34       	cpi	r24, 0x45	; 69
 710:	38 f4       	brcc	.+14     	; 0x720 <DIO_Write_High_Nibble+0x1a>
 712:	82 34       	cpi	r24, 0x42	; 66
 714:	c1 f0       	breq	.+48     	; 0x746 <DIO_Write_High_Nibble+0x40>
 716:	83 34       	cpi	r24, 0x43	; 67
 718:	e8 f4       	brcc	.+58     	; 0x754 <DIO_Write_High_Nibble+0x4e>
 71a:	81 34       	cpi	r24, 0x41	; 65
 71c:	41 f5       	brne	.+80     	; 0x76e <DIO_Write_High_Nibble+0x68>
 71e:	0c c0       	rjmp	.+24     	; 0x738 <DIO_Write_High_Nibble+0x32>
 720:	82 36       	cpi	r24, 0x62	; 98
 722:	89 f0       	breq	.+34     	; 0x746 <DIO_Write_High_Nibble+0x40>
 724:	83 36       	cpi	r24, 0x63	; 99
 726:	18 f4       	brcc	.+6      	; 0x72e <DIO_Write_High_Nibble+0x28>
 728:	81 36       	cpi	r24, 0x61	; 97
 72a:	09 f5       	brne	.+66     	; 0x76e <DIO_Write_High_Nibble+0x68>
 72c:	05 c0       	rjmp	.+10     	; 0x738 <DIO_Write_High_Nibble+0x32>
 72e:	83 36       	cpi	r24, 0x63	; 99
 730:	89 f0       	breq	.+34     	; 0x754 <DIO_Write_High_Nibble+0x4e>
 732:	84 36       	cpi	r24, 0x64	; 100
 734:	e1 f4       	brne	.+56     	; 0x76e <DIO_Write_High_Nibble+0x68>
 736:	15 c0       	rjmp	.+42     	; 0x762 <DIO_Write_High_Nibble+0x5c>
	{
		case 'A':
		case 'a':
		PORTA &=0x0F;	//basfr el high nibble 3shan law fe value adema
 738:	8b b3       	in	r24, 0x1b	; 27
 73a:	8f 70       	andi	r24, 0x0F	; 15
 73c:	8b bb       	out	0x1b, r24	; 27
		PORTA |=value;	//btl3 el value bt3te
 73e:	8b b3       	in	r24, 0x1b	; 27
 740:	68 2b       	or	r22, r24
 742:	6b bb       	out	0x1b, r22	; 27
		break;
 744:	08 95       	ret
		
		case 'B':
		case'b':
		PORTB &=0x0F;	//basfr el high nibble
 746:	88 b3       	in	r24, 0x18	; 24
 748:	8f 70       	andi	r24, 0x0F	; 15
 74a:	88 bb       	out	0x18, r24	; 24
		PORTB |=value;	//btl3 el value bt3te
 74c:	88 b3       	in	r24, 0x18	; 24
 74e:	68 2b       	or	r22, r24
 750:	68 bb       	out	0x18, r22	; 24
		break;
 752:	08 95       	ret
		
		case 'C':
		case 'c':
		PORTC &=0x0F;
 754:	85 b3       	in	r24, 0x15	; 21
 756:	8f 70       	andi	r24, 0x0F	; 15
 758:	85 bb       	out	0x15, r24	; 21
		PORTC |=value;
 75a:	85 b3       	in	r24, 0x15	; 21
 75c:	68 2b       	or	r22, r24
 75e:	65 bb       	out	0x15, r22	; 21
		break;
 760:	08 95       	ret
		
		case 'D':
		case 'd':
		PORTD &=0x0F;
 762:	82 b3       	in	r24, 0x12	; 18
 764:	8f 70       	andi	r24, 0x0F	; 15
 766:	82 bb       	out	0x12, r24	; 18
		PORTD |=value;
 768:	82 b3       	in	r24, 0x12	; 18
 76a:	68 2b       	or	r22, r24
 76c:	62 bb       	out	0x12, r22	; 18
 76e:	08 95       	ret

00000770 <LED_vInit>:
#include "STD_Types.h"


void LED_vInit(unsigned char portname,unsigned char pinnumber)//EX:  ('A',0)
{
	DIO_set_PINDir(portname,pinnumber,1);
 770:	41 e0       	ldi	r20, 0x01	; 1
 772:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_set_PINDir>
}
 776:	08 95       	ret

00000778 <LED_vTurnOn>:

void LED_vTurnOn(unsigned char portname,unsigned char pinnumber)//EX:  ('A',7)
{
	DIO_Write(portname,pinnumber,1);
 778:	41 e0       	ldi	r20, 0x01	; 1
 77a:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write>
}
 77e:	08 95       	ret

00000780 <LED_vTurnOFF>:

void LED_vTurnOFF(unsigned char portname,unsigned char pinnumber)//EX:  ('A',4)
{
	DIO_Write(portname,pinnumber,0);
 780:	40 e0       	ldi	r20, 0x00	; 0
 782:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write>
}
 786:	08 95       	ret

00000788 <LED_vToggle>:

void LED_vToggle(unsigned char portname,unsigned char pinnumber)//EX:  ('A',3)
{
	DIO_Toggle(portname,pinnumber);
 788:	0e 94 12 02 	call	0x424	; 0x424 <DIO_Toggle>
}
 78c:	08 95       	ret

0000078e <LED_u8ReadStatus>:

char LED_u8ReadStatus(uint8 portname,uint8 pinnumber)
{
	return DIO_u8read(portname,pinnumber);//return the current status of the given pin
 78e:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_u8read>
}
 792:	08 95       	ret

00000794 <main>:
volatile uint8 Last_Air_Cond_Value=AIR_COND_OFF;		//save the last status of the air_cond

int main(void)
{
	/*************INITIALIZATION************/
	LED_vInit('D',0);									//init Room1 led
 794:	84 e4       	ldi	r24, 0x44	; 68
 796:	60 e0       	ldi	r22, 0x00	; 0
 798:	0e 94 b8 03 	call	0x770	; 0x770 <LED_vInit>
	LED_vInit('D',1);									//init Room2 led
 79c:	84 e4       	ldi	r24, 0x44	; 68
 79e:	61 e0       	ldi	r22, 0x01	; 1
 7a0:	0e 94 b8 03 	call	0x770	; 0x770 <LED_vInit>
	LED_vInit('D',2);									//init Room3 led
 7a4:	84 e4       	ldi	r24, 0x44	; 68
 7a6:	62 e0       	ldi	r22, 0x02	; 2
 7a8:	0e 94 b8 03 	call	0x770	; 0x770 <LED_vInit>
	LED_vInit('D',3);									//init Room4 led
 7ac:	84 e4       	ldi	r24, 0x44	; 68
 7ae:	63 e0       	ldi	r22, 0x03	; 3
 7b0:	0e 94 b8 03 	call	0x770	; 0x770 <LED_vInit>
	LED_vInit('D',4);									//init TV led
 7b4:	84 e4       	ldi	r24, 0x44	; 68
 7b6:	64 e0       	ldi	r22, 0x04	; 4
 7b8:	0e 94 b8 03 	call	0x770	; 0x770 <LED_vInit>
	LED_vInit('D',5);									//init air_cond led
 7bc:	84 e4       	ldi	r24, 0x44	; 68
 7be:	65 e0       	ldi	r22, 0x05	; 5
 7c0:	0e 94 b8 03 	call	0x770	; 0x770 <LED_vInit>
	
	ADC_vInit();										//initialize ADC
 7c4:	0e 94 79 00 	call	0xf2	; 0xf2 <ADC_vInit>
	SPI_SlaveInit();									//initialize SPI protocol
 7c8:	0e 94 62 05 	call	0xac4	; 0xac4 <SPI_SlaveInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7cc:	8f ef       	ldi	r24, 0xFF	; 255
 7ce:	94 e3       	ldi	r25, 0x34	; 52
 7d0:	ac e0       	ldi	r26, 0x0C	; 12
 7d2:	81 50       	subi	r24, 0x01	; 1
 7d4:	90 40       	sbci	r25, 0x00	; 0
 7d6:	a0 40       	sbci	r26, 0x00	; 0
 7d8:	e1 f7       	brne	.-8      	; 0x7d2 <main+0x3e>
 7da:	00 c0       	rjmp	.+0      	; 0x7dc <main+0x48>
 7dc:	00 00       	nop
	_delay_ms(500);										//delay used in slave to wait the master LCD delay
	/**************************/
	
	/***************variable to send and receive using spi**********/
	uint8 Send=0;										//variable to send using SPI protocol
 7de:	c0 e0       	ldi	r28, 0x00	; 0
	uint8 receive=0;									//variable to RECEIVE using SPI protocol
	/*************************************************************/
    while(1)
    {
         receive=SPI_SlaveReceiverchar(DUMMY_DATA);		//exchanging data=> receive the message from master to know which action to perform
 7e0:	8f ef       	ldi	r24, 0xFF	; 255
 7e2:	0e 94 76 05 	call	0xaec	; 0xaec <SPI_SlaveReceiverchar>
		 
		 switch(receive)//switch on the message that come from the master
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	41 97       	sbiw	r24, 0x11	; 17
 7ea:	80 33       	cpi	r24, 0x30	; 48
 7ec:	91 05       	cpc	r25, r1
 7ee:	c0 f7       	brcc	.-16     	; 0x7e0 <main+0x4c>
 7f0:	86 5d       	subi	r24, 0xD6	; 214
 7f2:	9f 4f       	sbci	r25, 0xFF	; 255
 7f4:	fc 01       	movw	r30, r24
 7f6:	ee 0f       	add	r30, r30
 7f8:	ff 1f       	adc	r31, r31
 7fa:	05 90       	lpm	r0, Z+
 7fc:	f4 91       	lpm	r31, Z
 7fe:	e0 2d       	mov	r30, r0
 800:	09 94       	ijmp
		 {
			 /***********status of ROOMS**************/
			 case ROOM1_STATUS:							//case master send message ask about status of room1
					if(LED_u8ReadStatus('D',0)==1)		//read the value of the led
 802:	84 e4       	ldi	r24, 0x44	; 68
 804:	60 e0       	ldi	r22, 0x00	; 0
 806:	0e 94 c7 03 	call	0x78e	; 0x78e <LED_u8ReadStatus>
 80a:	81 30       	cpi	r24, 0x01	; 1
 80c:	39 f0       	breq	.+14     	; 0x81c <main+0x88>
					{
						Send=ON_STATUS;					//send message to indicate that the led is ON
					}
					else if(LED_u8ReadStatus('D',0)==0)	//read the value of the led
 80e:	84 e4       	ldi	r24, 0x44	; 68
 810:	60 e0       	ldi	r22, 0x00	; 0
 812:	0e 94 c7 03 	call	0x78e	; 0x78e <LED_u8ReadStatus>
 816:	88 23       	and	r24, r24
 818:	19 f0       	breq	.+6      	; 0x820 <main+0x8c>
 81a:	03 c0       	rjmp	.+6      	; 0x822 <main+0x8e>
		 {
			 /***********status of ROOMS**************/
			 case ROOM1_STATUS:							//case master send message ask about status of room1
					if(LED_u8ReadStatus('D',0)==1)		//read the value of the led
					{
						Send=ON_STATUS;					//send message to indicate that the led is ON
 81c:	c1 e0       	ldi	r28, 0x01	; 1
 81e:	01 c0       	rjmp	.+2      	; 0x822 <main+0x8e>
					}
					else if(LED_u8ReadStatus('D',0)==0)	//read the value of the led
					{
						Send=OFF_STATUS;				//send message to indicate that the led is OFF
 820:	c0 e0       	ldi	r28, 0x00	; 0
					}
					else{}
					SPI_SlaveReceiverchar(Send);		//send the status of room1
 822:	8c 2f       	mov	r24, r28
 824:	0e 94 76 05 	call	0xaec	; 0xaec <SPI_SlaveReceiverchar>
				break;
 828:	db cf       	rjmp	.-74     	; 0x7e0 <main+0x4c>
				
				
			case ROOM2_STATUS:							//case master send message ask about status of room2
					if(LED_u8ReadStatus('D',1)==1)		//read the value of the led
 82a:	84 e4       	ldi	r24, 0x44	; 68
 82c:	61 e0       	ldi	r22, 0x01	; 1
 82e:	0e 94 c7 03 	call	0x78e	; 0x78e <LED_u8ReadStatus>
 832:	81 30       	cpi	r24, 0x01	; 1
 834:	39 f0       	breq	.+14     	; 0x844 <main+0xb0>
					{
						Send=ON_STATUS;					//send message to indicate that the led is ON
					}
					else if(LED_u8ReadStatus('D',1)==0)	//read the value of the led
 836:	84 e4       	ldi	r24, 0x44	; 68
 838:	61 e0       	ldi	r22, 0x01	; 1
 83a:	0e 94 c7 03 	call	0x78e	; 0x78e <LED_u8ReadStatus>
 83e:	88 23       	and	r24, r24
 840:	19 f0       	breq	.+6      	; 0x848 <main+0xb4>
 842:	03 c0       	rjmp	.+6      	; 0x84a <main+0xb6>
				
				
			case ROOM2_STATUS:							//case master send message ask about status of room2
					if(LED_u8ReadStatus('D',1)==1)		//read the value of the led
					{
						Send=ON_STATUS;					//send message to indicate that the led is ON
 844:	c1 e0       	ldi	r28, 0x01	; 1
 846:	01 c0       	rjmp	.+2      	; 0x84a <main+0xb6>
					}
					else if(LED_u8ReadStatus('D',1)==0)	//read the value of the led
					{
						Send=OFF_STATUS;				//send message to indicate that the led is OFF
 848:	c0 e0       	ldi	r28, 0x00	; 0
					}
				else{}
				SPI_SlaveReceiverchar(Send);			//send the status of room2
 84a:	8c 2f       	mov	r24, r28
 84c:	0e 94 76 05 	call	0xaec	; 0xaec <SPI_SlaveReceiverchar>
			break;
 850:	c7 cf       	rjmp	.-114    	; 0x7e0 <main+0x4c>
				
				
			case ROOM3_STATUS:							//case master send message ask about status of room3
				if(LED_u8ReadStatus('D',2)==1)			//read the value of the led
 852:	84 e4       	ldi	r24, 0x44	; 68
 854:	62 e0       	ldi	r22, 0x02	; 2
 856:	0e 94 c7 03 	call	0x78e	; 0x78e <LED_u8ReadStatus>
 85a:	81 30       	cpi	r24, 0x01	; 1
 85c:	39 f0       	breq	.+14     	; 0x86c <__stack+0xd>
				{
					Send=ON_STATUS;						//send message to indicate that the led is ON
				}
				else if(LED_u8ReadStatus('D',2)==0)		//read the value of the led
 85e:	84 e4       	ldi	r24, 0x44	; 68
 860:	62 e0       	ldi	r22, 0x02	; 2
 862:	0e 94 c7 03 	call	0x78e	; 0x78e <LED_u8ReadStatus>
 866:	88 23       	and	r24, r24
 868:	19 f0       	breq	.+6      	; 0x870 <__stack+0x11>
 86a:	03 c0       	rjmp	.+6      	; 0x872 <__stack+0x13>
				
				
			case ROOM3_STATUS:							//case master send message ask about status of room3
				if(LED_u8ReadStatus('D',2)==1)			//read the value of the led
				{
					Send=ON_STATUS;						//send message to indicate that the led is ON
 86c:	c1 e0       	ldi	r28, 0x01	; 1
 86e:	01 c0       	rjmp	.+2      	; 0x872 <__stack+0x13>
				}
				else if(LED_u8ReadStatus('D',2)==0)		//read the value of the led
				{
					Send=OFF_STATUS;					//send message to indicate that the led is OFF
 870:	c0 e0       	ldi	r28, 0x00	; 0
				}
				
				else{}
				SPI_SlaveReceiverchar(Send);		//send the status of room3
 872:	8c 2f       	mov	r24, r28
 874:	0e 94 76 05 	call	0xaec	; 0xaec <SPI_SlaveReceiverchar>
			break;
 878:	b3 cf       	rjmp	.-154    	; 0x7e0 <main+0x4c>
					
			case ROOM4_STATUS:							//case master send message ask about status of room4
				if(LED_u8ReadStatus('D',3)==1)			//read the value of the led
 87a:	84 e4       	ldi	r24, 0x44	; 68
 87c:	63 e0       	ldi	r22, 0x03	; 3
 87e:	0e 94 c7 03 	call	0x78e	; 0x78e <LED_u8ReadStatus>
 882:	81 30       	cpi	r24, 0x01	; 1
 884:	39 f0       	breq	.+14     	; 0x894 <__stack+0x35>
				{
					Send=ON_STATUS;						//send message to indicate that the led is ON
				}
				else if(LED_u8ReadStatus('D',3)==0)		//read the value of the led
 886:	84 e4       	ldi	r24, 0x44	; 68
 888:	63 e0       	ldi	r22, 0x03	; 3
 88a:	0e 94 c7 03 	call	0x78e	; 0x78e <LED_u8ReadStatus>
 88e:	88 23       	and	r24, r24
 890:	19 f0       	breq	.+6      	; 0x898 <__stack+0x39>
 892:	03 c0       	rjmp	.+6      	; 0x89a <__stack+0x3b>
			break;
					
			case ROOM4_STATUS:							//case master send message ask about status of room4
				if(LED_u8ReadStatus('D',3)==1)			//read the value of the led
				{
					Send=ON_STATUS;						//send message to indicate that the led is ON
 894:	c1 e0       	ldi	r28, 0x01	; 1
 896:	01 c0       	rjmp	.+2      	; 0x89a <__stack+0x3b>
				}
				else if(LED_u8ReadStatus('D',3)==0)		//read the value of the led
				{
					Send=OFF_STATUS;					//send message to indicate that the led is OFF
 898:	c0 e0       	ldi	r28, 0x00	; 0
				}
				else{}
				SPI_SlaveReceiverchar(Send);			//send the status of room4
 89a:	8c 2f       	mov	r24, r28
 89c:	0e 94 76 05 	call	0xaec	; 0xaec <SPI_SlaveReceiverchar>
			break;
 8a0:	9f cf       	rjmp	.-194    	; 0x7e0 <main+0x4c>
				
			case TV_STATUS:								//case master send message ask about status of TV
				if(LED_u8ReadStatus('D',4)==1)			//read the value of the led
 8a2:	84 e4       	ldi	r24, 0x44	; 68
 8a4:	64 e0       	ldi	r22, 0x04	; 4
 8a6:	0e 94 c7 03 	call	0x78e	; 0x78e <LED_u8ReadStatus>
 8aa:	81 30       	cpi	r24, 0x01	; 1
 8ac:	39 f0       	breq	.+14     	; 0x8bc <__stack+0x5d>
				{
					Send=ON_STATUS;						//send message to indicate that the led is ON
				}
				else if(LED_u8ReadStatus('D',4)==0)		//read the value of the led
 8ae:	84 e4       	ldi	r24, 0x44	; 68
 8b0:	64 e0       	ldi	r22, 0x04	; 4
 8b2:	0e 94 c7 03 	call	0x78e	; 0x78e <LED_u8ReadStatus>
 8b6:	88 23       	and	r24, r24
 8b8:	19 f0       	breq	.+6      	; 0x8c0 <__stack+0x61>
 8ba:	03 c0       	rjmp	.+6      	; 0x8c2 <__stack+0x63>
			break;
				
			case TV_STATUS:								//case master send message ask about status of TV
				if(LED_u8ReadStatus('D',4)==1)			//read the value of the led
				{
					Send=ON_STATUS;						//send message to indicate that the led is ON
 8bc:	c1 e0       	ldi	r28, 0x01	; 1
 8be:	01 c0       	rjmp	.+2      	; 0x8c2 <__stack+0x63>
				}
				else if(LED_u8ReadStatus('D',4)==0)		//read the value of the led
				{
					Send=OFF_STATUS;					//send message to indicate that the led is OFF
 8c0:	c0 e0       	ldi	r28, 0x00	; 0
				}
				else{}
				SPI_SlaveReceiverchar(Send);			//send the status of TV
 8c2:	8c 2f       	mov	r24, r28
 8c4:	0e 94 76 05 	call	0xaec	; 0xaec <SPI_SlaveReceiverchar>
			break;
 8c8:	8b cf       	rjmp	.-234    	; 0x7e0 <main+0x4c>
			
			case AIR_COND_STATUS:						//case master send message ask about status of AIR_COND
				if(LED_u8ReadStatus('D',5)==1)			//read the value of the led
 8ca:	84 e4       	ldi	r24, 0x44	; 68
 8cc:	65 e0       	ldi	r22, 0x05	; 5
 8ce:	0e 94 c7 03 	call	0x78e	; 0x78e <LED_u8ReadStatus>
 8d2:	81 30       	cpi	r24, 0x01	; 1
 8d4:	39 f0       	breq	.+14     	; 0x8e4 <__stack+0x85>
				{
					Send=ON_STATUS;						//send message to indicate that the led is ON
				}
				else if(LED_u8ReadStatus('D',5)==0)		//read the value of the led
 8d6:	84 e4       	ldi	r24, 0x44	; 68
 8d8:	65 e0       	ldi	r22, 0x05	; 5
 8da:	0e 94 c7 03 	call	0x78e	; 0x78e <LED_u8ReadStatus>
 8de:	88 23       	and	r24, r24
 8e0:	19 f0       	breq	.+6      	; 0x8e8 <__stack+0x89>
 8e2:	03 c0       	rjmp	.+6      	; 0x8ea <__stack+0x8b>
			break;
			
			case AIR_COND_STATUS:						//case master send message ask about status of AIR_COND
				if(LED_u8ReadStatus('D',5)==1)			//read the value of the led
				{
					Send=ON_STATUS;						//send message to indicate that the led is ON
 8e4:	c1 e0       	ldi	r28, 0x01	; 1
 8e6:	01 c0       	rjmp	.+2      	; 0x8ea <__stack+0x8b>
				}
				else if(LED_u8ReadStatus('D',5)==0)		//read the value of the led
				{
					Send=OFF_STATUS;					//send message to indicate that the led is OFF
 8e8:	c0 e0       	ldi	r28, 0x00	; 0
				}
			else{}
			SPI_SlaveReceiverchar(Send);				//send the status of AIR_COND
 8ea:	8c 2f       	mov	r24, r28
 8ec:	0e 94 76 05 	call	0xaec	; 0xaec <SPI_SlaveReceiverchar>
			break;
 8f0:	77 cf       	rjmp	.-274    	; 0x7e0 <main+0x4c>
			/******************************************************************/
			
			/**************on and off commands*************/
			case ROOM1_TURN_ON:							//case master send message to turn_ON room1
				LED_vTurnOn('D',0);
 8f2:	84 e4       	ldi	r24, 0x44	; 68
 8f4:	60 e0       	ldi	r22, 0x00	; 0
 8f6:	0e 94 bc 03 	call	0x778	; 0x778 <LED_vTurnOn>
				break;
 8fa:	72 cf       	rjmp	.-284    	; 0x7e0 <main+0x4c>
			case ROOM1_TURN_OFF:						//case master send message to turn_Off room1
				LED_vTurnOFF('D',0);
 8fc:	84 e4       	ldi	r24, 0x44	; 68
 8fe:	60 e0       	ldi	r22, 0x00	; 0
 900:	0e 94 c0 03 	call	0x780	; 0x780 <LED_vTurnOFF>
				break; 
 904:	6d cf       	rjmp	.-294    	; 0x7e0 <main+0x4c>
				
			case ROOM2_TURN_ON:							//case master send message to turn_ON room2
				LED_vTurnOn('D',1);
 906:	84 e4       	ldi	r24, 0x44	; 68
 908:	61 e0       	ldi	r22, 0x01	; 1
 90a:	0e 94 bc 03 	call	0x778	; 0x778 <LED_vTurnOn>
				break;
 90e:	68 cf       	rjmp	.-304    	; 0x7e0 <main+0x4c>
			case ROOM2_TURN_OFF:						//case master send message to turn_OFF room2
				LED_vTurnOFF('D',1);
 910:	84 e4       	ldi	r24, 0x44	; 68
 912:	61 e0       	ldi	r22, 0x01	; 1
 914:	0e 94 c0 03 	call	0x780	; 0x780 <LED_vTurnOFF>
				break;
 918:	63 cf       	rjmp	.-314    	; 0x7e0 <main+0x4c>
						
				case ROOM3_TURN_ON:						//case master send message to turn_ON room3
				LED_vTurnOn('D',2);
 91a:	84 e4       	ldi	r24, 0x44	; 68
 91c:	62 e0       	ldi	r22, 0x02	; 2
 91e:	0e 94 bc 03 	call	0x778	; 0x778 <LED_vTurnOn>
				break;
 922:	5e cf       	rjmp	.-324    	; 0x7e0 <main+0x4c>
			case ROOM3_TURN_OFF:						//case master send message to turn_OFF room4
				LED_vTurnOFF('D',2);
 924:	84 e4       	ldi	r24, 0x44	; 68
 926:	62 e0       	ldi	r22, 0x02	; 2
 928:	0e 94 c0 03 	call	0x780	; 0x780 <LED_vTurnOFF>
				break;
 92c:	59 cf       	rjmp	.-334    	; 0x7e0 <main+0x4c>
				
			case ROOM4_TURN_ON:							//case master send message to turn_ON room4
				LED_vTurnOn('D',3);
 92e:	84 e4       	ldi	r24, 0x44	; 68
 930:	63 e0       	ldi	r22, 0x03	; 3
 932:	0e 94 bc 03 	call	0x778	; 0x778 <LED_vTurnOn>
				break;
 936:	54 cf       	rjmp	.-344    	; 0x7e0 <main+0x4c>
			case ROOM4_TURN_OFF:						//case master send message to turn_OFF room4
				LED_vTurnOFF('D',3);
 938:	84 e4       	ldi	r24, 0x44	; 68
 93a:	63 e0       	ldi	r22, 0x03	; 3
 93c:	0e 94 c0 03 	call	0x780	; 0x780 <LED_vTurnOFF>
				break;
 940:	4f cf       	rjmp	.-354    	; 0x7e0 <main+0x4c>
				
			case TV_TURN_ON:							//case master send message to turn_ON TV
				LED_vTurnOn('D',4);
 942:	84 e4       	ldi	r24, 0x44	; 68
 944:	64 e0       	ldi	r22, 0x04	; 4
 946:	0e 94 bc 03 	call	0x778	; 0x778 <LED_vTurnOn>
				break;
 94a:	4a cf       	rjmp	.-364    	; 0x7e0 <main+0x4c>
			case TV_TURN_OFF:							//case master send message to turn_OFF TV
				LED_vTurnOFF('D',4);
 94c:	84 e4       	ldi	r24, 0x44	; 68
 94e:	64 e0       	ldi	r22, 0x04	; 4
 950:	0e 94 c0 03 	call	0x780	; 0x780 <LED_vTurnOFF>
				break;		
 954:	45 cf       	rjmp	.-374    	; 0x7e0 <main+0x4c>
				
			case AIR_COND_TURN_ON:						//case master send message to turn_ON AIR_COND
				Timer_CTC_Init_interrupt();				//start timer0 to start count ticks case air_cond on
 956:	0e 94 85 05 	call	0xb0a	; 0xb0a <Timer_CTC_Init_interrupt>
				LED_vTurnOn('D',5);
 95a:	84 e4       	ldi	r24, 0x44	; 68
 95c:	65 e0       	ldi	r22, 0x05	; 5
 95e:	0e 94 bc 03 	call	0x778	; 0x778 <LED_vTurnOn>
				break;
 962:	3e cf       	rjmp	.-388    	; 0x7e0 <main+0x4c>
			case AIR_COND_TURN_OFF:						//case master send message to turn_OFF AIR_COND
				Timer_stop_CTC_mode();					//stop timer0 case air_cond off
 964:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <Timer_stop_CTC_mode>
				LED_vTurnOFF('D',5);
 968:	84 e4       	ldi	r24, 0x44	; 68
 96a:	65 e0       	ldi	r22, 0x05	; 5
 96c:	0e 94 c0 03 	call	0x780	; 0x780 <LED_vTurnOFF>
			break;		
 970:	37 cf       	rjmp	.-402    	; 0x7e0 <main+0x4c>
				/**************************************************/
				
			/****************set temp*****************/
			case SET_TEMP:								//case master send message to set Tempreature
			
				Required_Temp=SPI_SlaveReceiverchar(DUMMY_DATA);	//take the tempreature value from master
 972:	8f ef       	ldi	r24, 0xFF	; 255
 974:	0e 94 76 05 	call	0xaec	; 0xaec <SPI_SlaveReceiverchar>
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	90 93 61 00 	sts	0x0061, r25
 97e:	80 93 60 00 	sts	0x0060, r24
			
			break;
 982:	2e cf       	rjmp	.-420    	; 0x7e0 <main+0x4c>

00000984 <__vector_10>:
		 }			 
    }
}

ISR(TIMER0_COMP_vect)
{
 984:	1f 92       	push	r1
 986:	0f 92       	push	r0
 988:	0f b6       	in	r0, 0x3f	; 63
 98a:	0f 92       	push	r0
 98c:	11 24       	eor	r1, r1
 98e:	2f 93       	push	r18
 990:	3f 93       	push	r19
 992:	4f 93       	push	r20
 994:	5f 93       	push	r21
 996:	6f 93       	push	r22
 998:	7f 93       	push	r23
 99a:	8f 93       	push	r24
 99c:	9f 93       	push	r25
 99e:	af 93       	push	r26
 9a0:	bf 93       	push	r27
 9a2:	ef 93       	push	r30
 9a4:	ff 93       	push	r31
	counter++;													//start counting 
 9a6:	80 91 65 00 	lds	r24, 0x0065
 9aa:	8f 5f       	subi	r24, 0xFF	; 255
 9ac:	80 93 65 00 	sts	0x0065, r24
	if(counter>=10)												//repeat every 10msec
 9b0:	80 91 65 00 	lds	r24, 0x0065
 9b4:	8a 30       	cpi	r24, 0x0A	; 10
 9b6:	08 f4       	brcc	.+2      	; 0x9ba <__vector_10+0x36>
 9b8:	5c c0       	rjmp	.+184    	; 0xa72 <__vector_10+0xee>
	{
		counter=0;												//remove the value saved in counter to repeat the loop
 9ba:	10 92 65 00 	sts	0x0065, r1
		
		Temp_Sensor_Reading=(0.25*ADC_u16Read());				//0.25=>((2.56*1000*x)/(10*1024))
 9be:	0e 94 7f 00 	call	0xfe	; 0xfe <ADC_u16Read>
 9c2:	bc 01       	movw	r22, r24
 9c4:	80 e0       	ldi	r24, 0x00	; 0
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__floatunsisf>
 9cc:	20 e0       	ldi	r18, 0x00	; 0
 9ce:	30 e0       	ldi	r19, 0x00	; 0
 9d0:	40 e8       	ldi	r20, 0x80	; 128
 9d2:	5e e3       	ldi	r21, 0x3E	; 62
 9d4:	0e 94 3b 06 	call	0xc76	; 0xc76 <__mulsf3>
 9d8:	0e 94 a9 05 	call	0xb52	; 0xb52 <__fixunssfsi>
 9dc:	dc 01       	movw	r26, r24
 9de:	cb 01       	movw	r24, r22
 9e0:	90 93 64 00 	sts	0x0064, r25
 9e4:	80 93 63 00 	sts	0x0063, r24
		//calculate the value that the sensor reads 
		
		if(Temp_Sensor_Reading>=(Required_Temp+1))				//if the reading of the sensor MORE than the value of temp that the user set
 9e8:	20 91 60 00 	lds	r18, 0x0060
 9ec:	30 91 61 00 	lds	r19, 0x0061
 9f0:	80 91 63 00 	lds	r24, 0x0063
 9f4:	90 91 64 00 	lds	r25, 0x0064
 9f8:	2f 5f       	subi	r18, 0xFF	; 255
 9fa:	3f 4f       	sbci	r19, 0xFF	; 255
 9fc:	82 17       	cp	r24, r18
 9fe:	93 07       	cpc	r25, r19
 a00:	40 f0       	brcs	.+16     	; 0xa12 <__vector_10+0x8e>
		{
			LED_vTurnOn('D',5);									//OPEN the AIR_COND
 a02:	84 e4       	ldi	r24, 0x44	; 68
 a04:	65 e0       	ldi	r22, 0x05	; 5
 a06:	0e 94 bc 03 	call	0x778	; 0x778 <LED_vTurnOn>
			Last_Air_Cond_Value=AIR_COND_ON;					//save the last status of the Air_cond
 a0a:	81 e0       	ldi	r24, 0x01	; 1
 a0c:	80 93 62 00 	sts	0x0062, r24
 a10:	30 c0       	rjmp	.+96     	; 0xa72 <__vector_10+0xee>
		}
		else if(Temp_Sensor_Reading<=(Required_Temp-1))			//if the reading of the sensor LESS than the value of temp that the user set
 a12:	20 91 60 00 	lds	r18, 0x0060
 a16:	30 91 61 00 	lds	r19, 0x0061
 a1a:	80 91 63 00 	lds	r24, 0x0063
 a1e:	90 91 64 00 	lds	r25, 0x0064
 a22:	21 50       	subi	r18, 0x01	; 1
 a24:	30 40       	sbci	r19, 0x00	; 0
 a26:	28 17       	cp	r18, r24
 a28:	39 07       	cpc	r19, r25
 a2a:	38 f0       	brcs	.+14     	; 0xa3a <__vector_10+0xb6>
		{
			LED_vTurnOFF('D',5);								//CLOSE the AIR_COND
 a2c:	84 e4       	ldi	r24, 0x44	; 68
 a2e:	65 e0       	ldi	r22, 0x05	; 5
 a30:	0e 94 c0 03 	call	0x780	; 0x780 <LED_vTurnOFF>
			Last_Air_Cond_Value=AIR_COND_OFF;
 a34:	10 92 62 00 	sts	0x0062, r1
 a38:	1c c0       	rjmp	.+56     	; 0xa72 <__vector_10+0xee>
		}
		else if (Temp_Sensor_Reading==Required_Temp)			//if the reading of the sensor EQUAL than the value of temp that the user set
 a3a:	20 91 63 00 	lds	r18, 0x0063
 a3e:	30 91 64 00 	lds	r19, 0x0064
 a42:	80 91 60 00 	lds	r24, 0x0060
 a46:	90 91 61 00 	lds	r25, 0x0061
 a4a:	28 17       	cp	r18, r24
 a4c:	39 07       	cpc	r19, r25
 a4e:	89 f4       	brne	.+34     	; 0xa72 <__vector_10+0xee>
		{//follow the last status of Air_cond
			if(Last_Air_Cond_Value==AIR_COND_ON)
 a50:	80 91 62 00 	lds	r24, 0x0062
 a54:	81 30       	cpi	r24, 0x01	; 1
 a56:	29 f4       	brne	.+10     	; 0xa62 <__vector_10+0xde>
			{
				LED_vTurnOn('D',5);
 a58:	84 e4       	ldi	r24, 0x44	; 68
 a5a:	65 e0       	ldi	r22, 0x05	; 5
 a5c:	0e 94 bc 03 	call	0x778	; 0x778 <LED_vTurnOn>
 a60:	08 c0       	rjmp	.+16     	; 0xa72 <__vector_10+0xee>
			}
			else if(Last_Air_Cond_Value==AIR_COND_OFF)
 a62:	80 91 62 00 	lds	r24, 0x0062
 a66:	88 23       	and	r24, r24
 a68:	21 f4       	brne	.+8      	; 0xa72 <__vector_10+0xee>
			{
				LED_vTurnOFF('D',5);
 a6a:	84 e4       	ldi	r24, 0x44	; 68
 a6c:	65 e0       	ldi	r22, 0x05	; 5
 a6e:	0e 94 c0 03 	call	0x780	; 0x780 <LED_vTurnOFF>
			}
		}
	}
 a72:	ff 91       	pop	r31
 a74:	ef 91       	pop	r30
 a76:	bf 91       	pop	r27
 a78:	af 91       	pop	r26
 a7a:	9f 91       	pop	r25
 a7c:	8f 91       	pop	r24
 a7e:	7f 91       	pop	r23
 a80:	6f 91       	pop	r22
 a82:	5f 91       	pop	r21
 a84:	4f 91       	pop	r20
 a86:	3f 91       	pop	r19
 a88:	2f 91       	pop	r18
 a8a:	0f 90       	pop	r0
 a8c:	0f be       	out	0x3f, r0	; 63
 a8e:	0f 90       	pop	r0
 a90:	1f 90       	pop	r1
 a92:	18 95       	reti

00000a94 <SPI_MasterInit>:
#include "SPI_driver.h"


void SPI_MasterInit(void)
{
	DIO_set_PINDir('B',4,1);		//set direction SS pin o/p
 a94:	82 e4       	ldi	r24, 0x42	; 66
 a96:	64 e0       	ldi	r22, 0x04	; 4
 a98:	41 e0       	ldi	r20, 0x01	; 1
 a9a:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_set_PINDir>
	DIO_set_PINDir('B',5,1);		//set direction MOSI pin o/p
 a9e:	82 e4       	ldi	r24, 0x42	; 66
 aa0:	65 e0       	ldi	r22, 0x05	; 5
 aa2:	41 e0       	ldi	r20, 0x01	; 1
 aa4:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_set_PINDir>
	DIO_set_PINDir('B',7,1);		//set direction SCK pin o/p
 aa8:	82 e4       	ldi	r24, 0x42	; 66
 aaa:	67 e0       	ldi	r22, 0x07	; 7
 aac:	41 e0       	ldi	r20, 0x01	; 1
 aae:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_set_PINDir>
	
	SET_BIT(SPCR,MSTR);				//set direction master bit 
 ab2:	6c 9a       	sbi	0x0d, 4	; 13
	SET_BIT(SPCR,SPR0);				//set clk: F_CPU/16 fel master bs
 ab4:	68 9a       	sbi	0x0d, 0	; 13
	SET_BIT(SPCR,SPE);				//enable SPI hardware for master
 ab6:	6e 9a       	sbi	0x0d, 6	; 13
	
	DIO_Write('B',4,1);				//write 1 to SS pin to disable transmission 			
 ab8:	82 e4       	ldi	r24, 0x42	; 66
 aba:	64 e0       	ldi	r22, 0x04	; 4
 abc:	41 e0       	ldi	r20, 0x01	; 1
 abe:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write>
}
 ac2:	08 95       	ret

00000ac4 <SPI_SlaveInit>:

void SPI_SlaveInit(void)
{
	SET_BIT(SPCR,SPE);				//enable spi hardware for slave
 ac4:	6e 9a       	sbi	0x0d, 6	; 13
	DIO_set_PINDir('B',6,1);		//set direction MISO pin o/p
 ac6:	82 e4       	ldi	r24, 0x42	; 66
 ac8:	66 e0       	ldi	r22, 0x06	; 6
 aca:	41 e0       	ldi	r20, 0x01	; 1
 acc:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_set_PINDir>
}
 ad0:	08 95       	ret

00000ad2 <SPI_MasterTransmitchar>:

unsigned char SPI_MasterTransmitchar(unsigned char Data)
{
 ad2:	cf 93       	push	r28
 ad4:	c8 2f       	mov	r28, r24
	DIO_Write('B',4,0);				//write 0 to SS pin to start transmission
 ad6:	82 e4       	ldi	r24, 0x42	; 66
 ad8:	64 e0       	ldi	r22, 0x04	; 4
 ada:	40 e0       	ldi	r20, 0x00	; 0
 adc:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write>
	SPDR=Data;						//send data to slave
 ae0:	cf b9       	out	0x0f, r28	; 15
	while(READ_BIT(SPSR,SPIF)==0);	//wait till interrupt flag be high "serial transmission complete"
 ae2:	77 9b       	sbis	0x0e, 7	; 14
 ae4:	fe cf       	rjmp	.-4      	; 0xae2 <SPI_MasterTransmitchar+0x10>
	return SPDR;					//return the exchanged data come from slave
 ae6:	8f b1       	in	r24, 0x0f	; 15
}
 ae8:	cf 91       	pop	r28
 aea:	08 95       	ret

00000aec <SPI_SlaveReceiverchar>:

unsigned char SPI_SlaveReceiverchar(unsigned char Data)
{
	SPDR=Data;						//send data to master
 aec:	8f b9       	out	0x0f, r24	; 15
	while(READ_BIT(SPSR,SPIF)==0);	//wait till interrupt flag be high "serial transmission complete"
 aee:	77 9b       	sbis	0x0e, 7	; 14
 af0:	fe cf       	rjmp	.-4      	; 0xaee <SPI_SlaveReceiverchar+0x2>
	return SPDR;					//return the exchanged data come from slave
 af2:	8f b1       	in	r24, 0x0f	; 15
 af4:	08 95       	ret

00000af6 <Timer_stop_CTC_mode>:
{
	/*CLR_BIT(TCCR0,CS00);
	CLR_BIT(TCCR0,CS01);
	CLR_BIT(TCCR0,CS02);*/
	//disable the clock to stop the counter
	CLR_BIT(TCCR0, CS00);
 af6:	83 b7       	in	r24, 0x33	; 51
 af8:	8e 7f       	andi	r24, 0xFE	; 254
 afa:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
 afc:	83 b7       	in	r24, 0x33	; 51
 afe:	8d 7f       	andi	r24, 0xFD	; 253
 b00:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS02);
 b02:	83 b7       	in	r24, 0x33	; 51
 b04:	8b 7f       	andi	r24, 0xFB	; 251
 b06:	83 bf       	out	0x33, r24	; 51
}
 b08:	08 95       	ret

00000b0a <Timer_CTC_Init_interrupt>:
	sei();							//enable I-bet
	SET_BIT(TIMSK,OCIE0);			//enable ctc inttterupt bit */
	
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 78; //to achieve tick equal to 10 msec
 b0a:	8e e4       	ldi	r24, 0x4E	; 78
 b0c:	8c bf       	out	0x3c, r24	; 60
	
	//Set timer mode
	//Set the mode as Compare match
	SET_BIT(TCCR0, WGM01);
 b0e:	83 b7       	in	r24, 0x33	; 51
 b10:	88 60       	ori	r24, 0x08	; 8
 b12:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, WGM00);
 b14:	83 b7       	in	r24, 0x33	; 51
 b16:	8f 7b       	andi	r24, 0xBF	; 191
 b18:	83 bf       	out	0x33, r24	; 51
	
	//Configure clock
	//set as clk/1024
	SET_BIT(TCCR0, CS00);
 b1a:	83 b7       	in	r24, 0x33	; 51
 b1c:	81 60       	ori	r24, 0x01	; 1
 b1e:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
 b20:	83 b7       	in	r24, 0x33	; 51
 b22:	8d 7f       	andi	r24, 0xFD	; 253
 b24:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, CS02);
 b26:	83 b7       	in	r24, 0x33	; 51
 b28:	84 60       	ori	r24, 0x04	; 4
 b2a:	83 bf       	out	0x33, r24	; 51
	
	//Enable global interrupts
	sei();
 b2c:	78 94       	sei
	
	//Enable timer 0 interrupt for compare match
	SET_BIT(TIMSK, OCIE0);
 b2e:	89 b7       	in	r24, 0x39	; 57
 b30:	82 60       	ori	r24, 0x02	; 2
 b32:	89 bf       	out	0x39, r24	; 57
}
 b34:	08 95       	ret

00000b36 <Timer2_OverFlow_Init_interrupt>:

void Timer2_OverFlow_Init_interrupt(void)
{
	SET_BIT(ASSR,AS2);				//3SHAN YA5OD EL CLOCK MN EXTERNAL CRYSTAL 
 b36:	82 b5       	in	r24, 0x22	; 34
 b38:	88 60       	ori	r24, 0x08	; 8
 b3a:	82 bd       	out	0x22, r24	; 34
	
	SET_BIT(TCCR2,CS22);			//SELECT PRESCALER 128 3shan yro7 el ISR kol sanya bzbt
 b3c:	85 b5       	in	r24, 0x25	; 37
 b3e:	84 60       	ori	r24, 0x04	; 4
 b40:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS20);
 b42:	85 b5       	in	r24, 0x25	; 37
 b44:	81 60       	ori	r24, 0x01	; 1
 b46:	85 bd       	out	0x25, r24	; 37
	
	sei();
 b48:	78 94       	sei
	SET_BIT(TIMSK,TOIE2);			//enable interrupt
 b4a:	89 b7       	in	r24, 0x39	; 57
 b4c:	80 64       	ori	r24, 0x40	; 64
 b4e:	89 bf       	out	0x39, r24	; 57
 b50:	08 95       	ret

00000b52 <__fixunssfsi>:
 b52:	70 d0       	rcall	.+224    	; 0xc34 <__fp_splitA>
 b54:	88 f0       	brcs	.+34     	; 0xb78 <__fixunssfsi+0x26>
 b56:	9f 57       	subi	r25, 0x7F	; 127
 b58:	90 f0       	brcs	.+36     	; 0xb7e <__fixunssfsi+0x2c>
 b5a:	b9 2f       	mov	r27, r25
 b5c:	99 27       	eor	r25, r25
 b5e:	b7 51       	subi	r27, 0x17	; 23
 b60:	a0 f0       	brcs	.+40     	; 0xb8a <__fixunssfsi+0x38>
 b62:	d1 f0       	breq	.+52     	; 0xb98 <__fixunssfsi+0x46>
 b64:	66 0f       	add	r22, r22
 b66:	77 1f       	adc	r23, r23
 b68:	88 1f       	adc	r24, r24
 b6a:	99 1f       	adc	r25, r25
 b6c:	1a f0       	brmi	.+6      	; 0xb74 <__fixunssfsi+0x22>
 b6e:	ba 95       	dec	r27
 b70:	c9 f7       	brne	.-14     	; 0xb64 <__fixunssfsi+0x12>
 b72:	12 c0       	rjmp	.+36     	; 0xb98 <__fixunssfsi+0x46>
 b74:	b1 30       	cpi	r27, 0x01	; 1
 b76:	81 f0       	breq	.+32     	; 0xb98 <__fixunssfsi+0x46>
 b78:	77 d0       	rcall	.+238    	; 0xc68 <__fp_zero>
 b7a:	b1 e0       	ldi	r27, 0x01	; 1
 b7c:	08 95       	ret
 b7e:	74 c0       	rjmp	.+232    	; 0xc68 <__fp_zero>
 b80:	67 2f       	mov	r22, r23
 b82:	78 2f       	mov	r23, r24
 b84:	88 27       	eor	r24, r24
 b86:	b8 5f       	subi	r27, 0xF8	; 248
 b88:	39 f0       	breq	.+14     	; 0xb98 <__fixunssfsi+0x46>
 b8a:	b9 3f       	cpi	r27, 0xF9	; 249
 b8c:	cc f3       	brlt	.-14     	; 0xb80 <__fixunssfsi+0x2e>
 b8e:	86 95       	lsr	r24
 b90:	77 95       	ror	r23
 b92:	67 95       	ror	r22
 b94:	b3 95       	inc	r27
 b96:	d9 f7       	brne	.-10     	; 0xb8e <__fixunssfsi+0x3c>
 b98:	3e f4       	brtc	.+14     	; 0xba8 <__fixunssfsi+0x56>
 b9a:	90 95       	com	r25
 b9c:	80 95       	com	r24
 b9e:	70 95       	com	r23
 ba0:	61 95       	neg	r22
 ba2:	7f 4f       	sbci	r23, 0xFF	; 255
 ba4:	8f 4f       	sbci	r24, 0xFF	; 255
 ba6:	9f 4f       	sbci	r25, 0xFF	; 255
 ba8:	08 95       	ret

00000baa <__floatunsisf>:
 baa:	e8 94       	clt
 bac:	09 c0       	rjmp	.+18     	; 0xbc0 <__floatsisf+0x12>

00000bae <__floatsisf>:
 bae:	97 fb       	bst	r25, 7
 bb0:	3e f4       	brtc	.+14     	; 0xbc0 <__floatsisf+0x12>
 bb2:	90 95       	com	r25
 bb4:	80 95       	com	r24
 bb6:	70 95       	com	r23
 bb8:	61 95       	neg	r22
 bba:	7f 4f       	sbci	r23, 0xFF	; 255
 bbc:	8f 4f       	sbci	r24, 0xFF	; 255
 bbe:	9f 4f       	sbci	r25, 0xFF	; 255
 bc0:	99 23       	and	r25, r25
 bc2:	a9 f0       	breq	.+42     	; 0xbee <__floatsisf+0x40>
 bc4:	f9 2f       	mov	r31, r25
 bc6:	96 e9       	ldi	r25, 0x96	; 150
 bc8:	bb 27       	eor	r27, r27
 bca:	93 95       	inc	r25
 bcc:	f6 95       	lsr	r31
 bce:	87 95       	ror	r24
 bd0:	77 95       	ror	r23
 bd2:	67 95       	ror	r22
 bd4:	b7 95       	ror	r27
 bd6:	f1 11       	cpse	r31, r1
 bd8:	f8 cf       	rjmp	.-16     	; 0xbca <__floatsisf+0x1c>
 bda:	fa f4       	brpl	.+62     	; 0xc1a <__floatsisf+0x6c>
 bdc:	bb 0f       	add	r27, r27
 bde:	11 f4       	brne	.+4      	; 0xbe4 <__floatsisf+0x36>
 be0:	60 ff       	sbrs	r22, 0
 be2:	1b c0       	rjmp	.+54     	; 0xc1a <__floatsisf+0x6c>
 be4:	6f 5f       	subi	r22, 0xFF	; 255
 be6:	7f 4f       	sbci	r23, 0xFF	; 255
 be8:	8f 4f       	sbci	r24, 0xFF	; 255
 bea:	9f 4f       	sbci	r25, 0xFF	; 255
 bec:	16 c0       	rjmp	.+44     	; 0xc1a <__floatsisf+0x6c>
 bee:	88 23       	and	r24, r24
 bf0:	11 f0       	breq	.+4      	; 0xbf6 <__floatsisf+0x48>
 bf2:	96 e9       	ldi	r25, 0x96	; 150
 bf4:	11 c0       	rjmp	.+34     	; 0xc18 <__floatsisf+0x6a>
 bf6:	77 23       	and	r23, r23
 bf8:	21 f0       	breq	.+8      	; 0xc02 <__floatsisf+0x54>
 bfa:	9e e8       	ldi	r25, 0x8E	; 142
 bfc:	87 2f       	mov	r24, r23
 bfe:	76 2f       	mov	r23, r22
 c00:	05 c0       	rjmp	.+10     	; 0xc0c <__floatsisf+0x5e>
 c02:	66 23       	and	r22, r22
 c04:	71 f0       	breq	.+28     	; 0xc22 <__floatsisf+0x74>
 c06:	96 e8       	ldi	r25, 0x86	; 134
 c08:	86 2f       	mov	r24, r22
 c0a:	70 e0       	ldi	r23, 0x00	; 0
 c0c:	60 e0       	ldi	r22, 0x00	; 0
 c0e:	2a f0       	brmi	.+10     	; 0xc1a <__floatsisf+0x6c>
 c10:	9a 95       	dec	r25
 c12:	66 0f       	add	r22, r22
 c14:	77 1f       	adc	r23, r23
 c16:	88 1f       	adc	r24, r24
 c18:	da f7       	brpl	.-10     	; 0xc10 <__floatsisf+0x62>
 c1a:	88 0f       	add	r24, r24
 c1c:	96 95       	lsr	r25
 c1e:	87 95       	ror	r24
 c20:	97 f9       	bld	r25, 7
 c22:	08 95       	ret

00000c24 <__fp_split3>:
 c24:	57 fd       	sbrc	r21, 7
 c26:	90 58       	subi	r25, 0x80	; 128
 c28:	44 0f       	add	r20, r20
 c2a:	55 1f       	adc	r21, r21
 c2c:	59 f0       	breq	.+22     	; 0xc44 <__fp_splitA+0x10>
 c2e:	5f 3f       	cpi	r21, 0xFF	; 255
 c30:	71 f0       	breq	.+28     	; 0xc4e <__fp_splitA+0x1a>
 c32:	47 95       	ror	r20

00000c34 <__fp_splitA>:
 c34:	88 0f       	add	r24, r24
 c36:	97 fb       	bst	r25, 7
 c38:	99 1f       	adc	r25, r25
 c3a:	61 f0       	breq	.+24     	; 0xc54 <__fp_splitA+0x20>
 c3c:	9f 3f       	cpi	r25, 0xFF	; 255
 c3e:	79 f0       	breq	.+30     	; 0xc5e <__fp_splitA+0x2a>
 c40:	87 95       	ror	r24
 c42:	08 95       	ret
 c44:	12 16       	cp	r1, r18
 c46:	13 06       	cpc	r1, r19
 c48:	14 06       	cpc	r1, r20
 c4a:	55 1f       	adc	r21, r21
 c4c:	f2 cf       	rjmp	.-28     	; 0xc32 <__fp_split3+0xe>
 c4e:	46 95       	lsr	r20
 c50:	f1 df       	rcall	.-30     	; 0xc34 <__fp_splitA>
 c52:	08 c0       	rjmp	.+16     	; 0xc64 <__fp_splitA+0x30>
 c54:	16 16       	cp	r1, r22
 c56:	17 06       	cpc	r1, r23
 c58:	18 06       	cpc	r1, r24
 c5a:	99 1f       	adc	r25, r25
 c5c:	f1 cf       	rjmp	.-30     	; 0xc40 <__fp_splitA+0xc>
 c5e:	86 95       	lsr	r24
 c60:	71 05       	cpc	r23, r1
 c62:	61 05       	cpc	r22, r1
 c64:	08 94       	sec
 c66:	08 95       	ret

00000c68 <__fp_zero>:
 c68:	e8 94       	clt

00000c6a <__fp_szero>:
 c6a:	bb 27       	eor	r27, r27
 c6c:	66 27       	eor	r22, r22
 c6e:	77 27       	eor	r23, r23
 c70:	cb 01       	movw	r24, r22
 c72:	97 f9       	bld	r25, 7
 c74:	08 95       	ret

00000c76 <__mulsf3>:
 c76:	0b d0       	rcall	.+22     	; 0xc8e <__mulsf3x>
 c78:	78 c0       	rjmp	.+240    	; 0xd6a <__fp_round>
 c7a:	69 d0       	rcall	.+210    	; 0xd4e <__fp_pscA>
 c7c:	28 f0       	brcs	.+10     	; 0xc88 <__mulsf3+0x12>
 c7e:	6e d0       	rcall	.+220    	; 0xd5c <__fp_pscB>
 c80:	18 f0       	brcs	.+6      	; 0xc88 <__mulsf3+0x12>
 c82:	95 23       	and	r25, r21
 c84:	09 f0       	breq	.+2      	; 0xc88 <__mulsf3+0x12>
 c86:	5a c0       	rjmp	.+180    	; 0xd3c <__fp_inf>
 c88:	5f c0       	rjmp	.+190    	; 0xd48 <__fp_nan>
 c8a:	11 24       	eor	r1, r1
 c8c:	ee cf       	rjmp	.-36     	; 0xc6a <__fp_szero>

00000c8e <__mulsf3x>:
 c8e:	ca df       	rcall	.-108    	; 0xc24 <__fp_split3>
 c90:	a0 f3       	brcs	.-24     	; 0xc7a <__mulsf3+0x4>

00000c92 <__mulsf3_pse>:
 c92:	95 9f       	mul	r25, r21
 c94:	d1 f3       	breq	.-12     	; 0xc8a <__mulsf3+0x14>
 c96:	95 0f       	add	r25, r21
 c98:	50 e0       	ldi	r21, 0x00	; 0
 c9a:	55 1f       	adc	r21, r21
 c9c:	62 9f       	mul	r22, r18
 c9e:	f0 01       	movw	r30, r0
 ca0:	72 9f       	mul	r23, r18
 ca2:	bb 27       	eor	r27, r27
 ca4:	f0 0d       	add	r31, r0
 ca6:	b1 1d       	adc	r27, r1
 ca8:	63 9f       	mul	r22, r19
 caa:	aa 27       	eor	r26, r26
 cac:	f0 0d       	add	r31, r0
 cae:	b1 1d       	adc	r27, r1
 cb0:	aa 1f       	adc	r26, r26
 cb2:	64 9f       	mul	r22, r20
 cb4:	66 27       	eor	r22, r22
 cb6:	b0 0d       	add	r27, r0
 cb8:	a1 1d       	adc	r26, r1
 cba:	66 1f       	adc	r22, r22
 cbc:	82 9f       	mul	r24, r18
 cbe:	22 27       	eor	r18, r18
 cc0:	b0 0d       	add	r27, r0
 cc2:	a1 1d       	adc	r26, r1
 cc4:	62 1f       	adc	r22, r18
 cc6:	73 9f       	mul	r23, r19
 cc8:	b0 0d       	add	r27, r0
 cca:	a1 1d       	adc	r26, r1
 ccc:	62 1f       	adc	r22, r18
 cce:	83 9f       	mul	r24, r19
 cd0:	a0 0d       	add	r26, r0
 cd2:	61 1d       	adc	r22, r1
 cd4:	22 1f       	adc	r18, r18
 cd6:	74 9f       	mul	r23, r20
 cd8:	33 27       	eor	r19, r19
 cda:	a0 0d       	add	r26, r0
 cdc:	61 1d       	adc	r22, r1
 cde:	23 1f       	adc	r18, r19
 ce0:	84 9f       	mul	r24, r20
 ce2:	60 0d       	add	r22, r0
 ce4:	21 1d       	adc	r18, r1
 ce6:	82 2f       	mov	r24, r18
 ce8:	76 2f       	mov	r23, r22
 cea:	6a 2f       	mov	r22, r26
 cec:	11 24       	eor	r1, r1
 cee:	9f 57       	subi	r25, 0x7F	; 127
 cf0:	50 40       	sbci	r21, 0x00	; 0
 cf2:	8a f0       	brmi	.+34     	; 0xd16 <__mulsf3_pse+0x84>
 cf4:	e1 f0       	breq	.+56     	; 0xd2e <__mulsf3_pse+0x9c>
 cf6:	88 23       	and	r24, r24
 cf8:	4a f0       	brmi	.+18     	; 0xd0c <__mulsf3_pse+0x7a>
 cfa:	ee 0f       	add	r30, r30
 cfc:	ff 1f       	adc	r31, r31
 cfe:	bb 1f       	adc	r27, r27
 d00:	66 1f       	adc	r22, r22
 d02:	77 1f       	adc	r23, r23
 d04:	88 1f       	adc	r24, r24
 d06:	91 50       	subi	r25, 0x01	; 1
 d08:	50 40       	sbci	r21, 0x00	; 0
 d0a:	a9 f7       	brne	.-22     	; 0xcf6 <__mulsf3_pse+0x64>
 d0c:	9e 3f       	cpi	r25, 0xFE	; 254
 d0e:	51 05       	cpc	r21, r1
 d10:	70 f0       	brcs	.+28     	; 0xd2e <__mulsf3_pse+0x9c>
 d12:	14 c0       	rjmp	.+40     	; 0xd3c <__fp_inf>
 d14:	aa cf       	rjmp	.-172    	; 0xc6a <__fp_szero>
 d16:	5f 3f       	cpi	r21, 0xFF	; 255
 d18:	ec f3       	brlt	.-6      	; 0xd14 <__mulsf3_pse+0x82>
 d1a:	98 3e       	cpi	r25, 0xE8	; 232
 d1c:	dc f3       	brlt	.-10     	; 0xd14 <__mulsf3_pse+0x82>
 d1e:	86 95       	lsr	r24
 d20:	77 95       	ror	r23
 d22:	67 95       	ror	r22
 d24:	b7 95       	ror	r27
 d26:	f7 95       	ror	r31
 d28:	e7 95       	ror	r30
 d2a:	9f 5f       	subi	r25, 0xFF	; 255
 d2c:	c1 f7       	brne	.-16     	; 0xd1e <__mulsf3_pse+0x8c>
 d2e:	fe 2b       	or	r31, r30
 d30:	88 0f       	add	r24, r24
 d32:	91 1d       	adc	r25, r1
 d34:	96 95       	lsr	r25
 d36:	87 95       	ror	r24
 d38:	97 f9       	bld	r25, 7
 d3a:	08 95       	ret

00000d3c <__fp_inf>:
 d3c:	97 f9       	bld	r25, 7
 d3e:	9f 67       	ori	r25, 0x7F	; 127
 d40:	80 e8       	ldi	r24, 0x80	; 128
 d42:	70 e0       	ldi	r23, 0x00	; 0
 d44:	60 e0       	ldi	r22, 0x00	; 0
 d46:	08 95       	ret

00000d48 <__fp_nan>:
 d48:	9f ef       	ldi	r25, 0xFF	; 255
 d4a:	80 ec       	ldi	r24, 0xC0	; 192
 d4c:	08 95       	ret

00000d4e <__fp_pscA>:
 d4e:	00 24       	eor	r0, r0
 d50:	0a 94       	dec	r0
 d52:	16 16       	cp	r1, r22
 d54:	17 06       	cpc	r1, r23
 d56:	18 06       	cpc	r1, r24
 d58:	09 06       	cpc	r0, r25
 d5a:	08 95       	ret

00000d5c <__fp_pscB>:
 d5c:	00 24       	eor	r0, r0
 d5e:	0a 94       	dec	r0
 d60:	12 16       	cp	r1, r18
 d62:	13 06       	cpc	r1, r19
 d64:	14 06       	cpc	r1, r20
 d66:	05 06       	cpc	r0, r21
 d68:	08 95       	ret

00000d6a <__fp_round>:
 d6a:	09 2e       	mov	r0, r25
 d6c:	03 94       	inc	r0
 d6e:	00 0c       	add	r0, r0
 d70:	11 f4       	brne	.+4      	; 0xd76 <__fp_round+0xc>
 d72:	88 23       	and	r24, r24
 d74:	52 f0       	brmi	.+20     	; 0xd8a <__fp_round+0x20>
 d76:	bb 0f       	add	r27, r27
 d78:	40 f4       	brcc	.+16     	; 0xd8a <__fp_round+0x20>
 d7a:	bf 2b       	or	r27, r31
 d7c:	11 f4       	brne	.+4      	; 0xd82 <__fp_round+0x18>
 d7e:	60 ff       	sbrs	r22, 0
 d80:	04 c0       	rjmp	.+8      	; 0xd8a <__fp_round+0x20>
 d82:	6f 5f       	subi	r22, 0xFF	; 255
 d84:	7f 4f       	sbci	r23, 0xFF	; 255
 d86:	8f 4f       	sbci	r24, 0xFF	; 255
 d88:	9f 4f       	sbci	r25, 0xFF	; 255
 d8a:	08 95       	ret

00000d8c <_exit>:
 d8c:	f8 94       	cli

00000d8e <__stop_program>:
 d8e:	ff cf       	rjmp	.-2      	; 0xd8e <__stop_program>
